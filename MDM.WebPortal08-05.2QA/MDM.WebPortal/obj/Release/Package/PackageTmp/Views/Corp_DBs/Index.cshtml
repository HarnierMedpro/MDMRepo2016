@*@model IEnumerable<MDM.WebPortal.Models.FromDB.Corp_DBs>*@

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout1.cshtml";
    
}

<header class="main-header">
    <div class="container">
        <h1 class="page-title"></h1>
        <ol class="breadcrumb pull-right">
            <li><a href="@Url.Action("Index","Home")"><i class="fa fa-home"></i> Home</a></li>            
            <li class="active">Corp_DBs Relationship</li>
        </ol>
    </div>
</header>

<div class="container-fluid">
    @*<p>
        @Html.ActionLink("Create New", "Create")
    </p>*@
    <a class="btn btn-ar btn-default" href="@Url.Action("Create")">Create New</a>
    <br/>
    <br/>
    @(Html.Kendo().Grid<MDM.WebPortal.Models.ViewModel.VMCorporateMasterLists>()
      .Name("gridCorporat")
      .ToolBar(tool => tool.Excel())
      .Excel(e => e.AllPages(true)) //add it(new)
      .Columns(columns =>
      {
          columns.Bound(c => c.CorporateName).Title("CORPORATE NAME").Width(300);         
      })
      .Sortable()
      .Filterable()
      .Pageable(ps => ps.Refresh(true)
      .PreviousNext(true).PageSizes(true))      
      .Groupable()
      .ClientDetailTemplateId("template")
      .Events(e => e.ExcelExport("corpdb_excelExport").DetailInit("corpdb_detailInit"))
      .Reorderable(r => r.Columns(true))
      .Resizable(r => r.Columns(true))
      .Selectable(s => s.Enabled(true)
      .Type(GridSelectionType.Row)
      .Mode(GridSelectionMode.Single))

      .DataSource(dataSource => dataSource
          .Ajax()
          .ServerOperation(true)
          .PageSize(10)
          .Model(model =>
            {
                model.Id(x => x.corpID);
                model.Field(x => x.corpID).Editable(false);
                model.Field(x => x.CorporateName).Editable(true);
            })
           .Read(read => read.Action("Read", "Corp_DBs"))          
      )
      .Events(events => events.DataBound("dataBound"))  //add in(new)
    )
</div>


<script id="template" type="text/x-kendo-template">
    @(Html.Kendo().Grid<MDM.WebPortal.Models.ViewModel.VMCorp_DB>()
    .Name("gridCorporate_#=corpID#") 
            .Columns(columns =>
            {
                columns.Bound(o => o.ID_PK).Hidden(true);//Title("ID").Width(110);
                columns.ForeignKey(p => p.DB_ID, (System.Collections.IEnumerable)ViewData["DBs"], "DB_ID", "DB").Title("DB").Width(110);
                columns.Bound(o => o.databaseName).Title("NAME");
                columns.Bound(o => o.active).Width(300).Title("ACTIVE");

                columns.Command(commands =>
                  {
                      commands.Edit();
                      commands.Destroy().Text("Release");
                  }).Title("COMMANDS");
            })
            .DataSource(dataSource => dataSource
                .Ajax()
                .PageSize(10)
                .Events(events => events.Error("error_handler"))//allows us catch the errors sent by the JSON object, especificados por ModelState
                .Model(model =>
                  {
                      model.Id(x => x.ID_PK);
                      model.Field(x => x.ID_PK).Editable(false);
                      model.Field(x => x.databaseName).Editable(false);
                      model.Field(x => x.active).Editable(false);
                  })
                .Read(read => read.Action("HierarchyBinding_DBs", "Corp_DBs", new { corpID = "#=corpID#" }))
                .Update(x => x.Action("Update", "Corp_DBs", new { corpID = "#=corpID#" }))
                .Destroy(destroy => destroy.Action("Corp_DBs_Release", "Corp_DBs", new { corpID = "#=corpID#" }))
            )
            //.Events(e => e.ExcelExport("orders_excelExport")) //add it(new)
            .Pageable()
            .Sortable()
            .ToClientTemplate()
    )
</script>
<script>
   
    function dataBound() {
        detailExportPromises = [];
        this.expandRow(this.tbody.find("tr.k-master-row").first());
    }

    var detailExportPromises = [];

    function corpdb_detailInit(e) {
        var deferred = $.Deferred();

        // get the index of the master row
        var masterRowIndex = e.masterRow.index(".k-master-row");

        // add the deferred to the list of promises
        detailExportPromises.push(deferred);

        var detailGrid = e.detailRow.find("[data-role=grid]").data("kendoGrid");

        detailGrid.bind("excelExport", function (e) {
            // prevent saving the file
            e.preventDefault();

            // resolve the deferred
            deferred.resolve({
                masterRowIndex: masterRowIndex,
                sheet: e.workbook.sheets[0]
            });
        });
    }

    function corpdb_excelExport(e) {
        // prevent saving the file because we will update the workbook
        e.preventDefault();

        var workbook = e.workbook;

        // Export all detail grids
        $("[data-role=grid]", this.element).each(function () {
            $(this).data("kendoGrid").saveAsExcel();
        });

        // wait for all detail grids to finish exporting
        $.when.apply(null, detailExportPromises)
        .then(function () {
            // get the export results
            var detailExports = $.makeArray(arguments);

            // sort by masterRowIndex
            detailExports.sort(function (a, b) {
                return a.masterRowIndex - b.masterRowIndex;
            });

            // add an empty column
            workbook.sheets[0].columns.unshift({ width: 30 });

            // prepend an empty cell to each row
            for (var i = 0; i < workbook.sheets[0].rows.length; i++) {
                workbook.sheets[0].rows[i].cells.unshift({});
            }

            // merge the detail export sheet rows with the master sheet rows
            // loop backwards so the masterRowIndex doesn't need to be updated
            for (var i = detailExports.length - 1; i >= 0; i--) {
                var masterRowIndex = detailExports[i].masterRowIndex + 1;

                var sheet = detailExports[i].sheet;

                // prepend an empty cell to each row
                for (var ci = 0; ci < sheet.rows.length; ci++) {
                    if (sheet.rows[ci].cells[0].value) {
                        sheet.rows[ci].cells.unshift({});
                    }
                }

                // insert the detail sheet rows after the master row
                [].splice.apply(workbook.sheets[0].rows, [masterRowIndex + 1, 0].concat(sheet.rows));
            }

            // save the workbook
            kendo.saveAs({
                dataURI: new kendo.ooxml.Workbook(workbook).toDataURL(),
                fileName: "Export.xlsx"
            });
        });
    }

    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            // Display the message
            alert(message);
            // Cancel the changes
            var grid = $("#gridCorporat").data("kendoGrid");
            grid.cancelChanges();
        }
    }
        
</script>

<script src="~/Scripts/kendo/jszip.min.js"></script>