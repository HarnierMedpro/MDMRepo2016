@model IEnumerable<MDM.WebPortal.Models.Identity.ApplicationUser>

@{
    ViewBag.Title = "Index";
}

@*Original code generated by MVC*@
<header class="main-header">
    <div class="container">
        <h1 class="page-title"></h1>
        <ol class="breadcrumb pull-right">
            <li><a href="@Url.Action("Index","Home", new {area=""})"><i class="fa fa-home"></i> Home</a></li>
            <li class="active">Users</li>
        </ol>
    </div>
</header>

<!-------------Classic ASP.NET MVC View------------->
@*
    <div class="admin-container">
         <div class="row">
             <div class="col-md-offset-2 col-md-9">
                 <div class="panel panel-primary">
                     <div class="panel-heading"><i class="fa fa-users"></i> USERS ACCOUNTS</div>
                     <div class="table-responsive">
                         <table class="table table-hover">
                             <tr>
                                 <th>
                                     @Html.DisplayNameFor(model => model.Email)
                                 </th>
                                 <th>
                                     @Html.Label("ACTIVE")
                                 </th>
                                 <th>
                                     ACTIONS
                                 </th>
                             </tr>

                             @foreach (var item in Model)
                             {
                                 <tr>
                                     <td>
                                         @Html.DisplayFor(modelItem => item.Email)
                                     </td>
                                     <td>
                                         @Html.DisplayFor(modelItem => item.Active)
                                     </td>
                                     <td>
                                         <a href="@Url.Action("Edit", new { id = item.Id })" class="btn btn-sm btn-success">
                                             <i class="fa fa-edit"></i> Edit
                                         </a>

                                         <button class="btn btn-danger btn-sm" data-toggle="modal" data-target="#@item.Id">
                                             <i class="fa fa-trash"></i> Delete
                                         </button>
                                         <!-- Modal -->
                                         <div class="modal fade" id="@item.Id" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
                                             <div class="modal-dialog modal-sm">
                                                 <div class="modal-content">
                                                     <div class="modal-header">
                                                         <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                                                         <h3 class="modal-title" id="myModalLabel">Delete User</h3>
                                                     </div>
                                                     <div class="modal-body">
                                                         <div class="alert alert-danger">
                                                             <p><h4>Are you sure you want to delete this User?</h4></p>
                                                         </div>

                                                     </div>
                                                     <div class="modal-footer">
                                                         @using (Html.BeginForm("Delete", "UsersAdmin", FormMethod.Post, new { id = item.Id }))
                                                         {
                                                             @Html.AntiForgeryToken()
                                                             @Html.Hidden("id", item.Id)
                                                             <div class="form-actions no-color">
                                                                 <button type="submit" value="Delete" class="btn btn-sm btn-danger">Delete</button>
                                                                 <button type="button" class="btn btn-sm btn-default" data-dismiss="modal">Close</button>
                                                             </div>
                                                         }

                                                     </div>
                                                 </div>
                                             </div>
                                         </div>
                                     </td>
                                 </tr>
                             }

                         </table>
                     </div>
                 </div>
                 <div class="pull-right">
                     <a href="@Url.Action("Create")" class="button button-caution button-box button-raised button-longshadow">
                         <i class="fa fa-user-plus"></i>
                     </a>
                 </div>
             </div>
         </div>
     </div>

*@

<!-------------End Classic ASP.NET MVC View------------->
<script src="http://kendo.cdn.telerik.com/2016.2.714/js/jszip.min.js"></script>

<div class="container-fluid">
    <a href="@Url.Action("Create")" class="btn btn-ar btn-default">NEW USER</a>
    <br/>
    <br/>
    @(Html.Kendo().Grid<MDM.WebPortal.Models.ViewModel.VMUser>()
          .Name("Users")
          .ToolBar(tools => tools.Excel())
          .Columns(columns =>
          {
              columns.Bound(e => e.Id).Hidden(true);
              columns.Bound(e => e.Email).Title("USER NAME").Width(110);
              columns.ForeignKey(o => o.roleId, (System.Collections.IEnumerable) ViewData["Roles"], "roleId", "roleName").Title("ROLE").Width(110);
              columns.Bound(e => e.Active).Title("ACTIVE").Width(110);

              columns.Command(commands =>
              {
                  commands.Edit();
              }).Title("COMMANDS").Width(200);

          })
          .Sortable()
          .Pageable()
          .Groupable()
          .Filterable()
          .Scrollable(s => s.Enabled(false))
          .DataSource(dataSource => dataSource
              .Ajax()
              .PageSize(10)
              .Model(x =>
              {
                  x.Id(p => p.Id);
                  x.Field(p => p.Id).Editable(false);
              })
              .Events(events => events.Error("error_handler")) //allows us catch the errors sent by the JSON object, especificados por ModelState
              .Read(read => read.Action("Read", "UsersAdmin"))
              .Update(x => x.Action("Update", "UsersAdmin"))
          )
          )
</div>

<script>
    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    }
</script>