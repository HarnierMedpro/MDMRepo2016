@model IEnumerable<MDM.WebPortal.Models.Identity.ApplicationRole>

@{
    ViewBag.Title = "Index";
}


<header class="main-header">
    <div class="container">
        <h1 class="page-title"></h1>
        <ol class="breadcrumb pull-right">
            <li><a href="@Url.Action("Index","Home")"><i class="fa fa-home"></i> Home</a></li>
            <li class="active">Roles</li>
        </ol>
    </div>
</header>

@*<div class="admin-container">
        <div class="row">
            <div class="col-md-offset-2 col-md-8">
                <div class="panel panel-primary box-panel-admin">
                    <div class="panel-heading"><i class="fa fa-key"></i> <strong>ROLES</strong></div>

                    <div class="table-responsive">
                        <table class="table">
                            <tr>
                                <th>
                                    @Html.DisplayName("NAME")
                                </th>
                                <th>
                                    @Html.DisplayName("ACTIVE")
                                </th>
                                <th>
                                    @Html.Label("ACTIONS")
                                </th>
                            </tr>

                            @foreach (var item in Model)
                            {
                                <tr>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.Name)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.Active)
                                    </td>
                                    <td>
                                        <a href="@Url.Action("Edit", new {id = item.Id})" class="btn btn-sm btn-success">
                                            <i class="fa fa-edit"></i> Edit
                                        </a>

                                        <button class="btn btn-danger btn-sm" data-toggle="modal" data-target="#@item.Id">
                                            <i class="fa fa-trash"></i> Delete
                                        </button>
                                        <!-- Modal -->
                                        <div class="modal fade" id="@item.Id" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
                                            <div class="modal-dialog modal-sm">
                                                <div class="modal-content">
                                                    <div class="modal-header">
                                                        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                                                        <h3 class="modal-title" id="myModalLabel">Delete User</h3>
                                                    </div>
                                                    <div class="modal-body">
                                                        <div class="alert alert-danger">
                                                            <p><h4>Are you sure you want to delete this Role?</h4></p>
                                                        </div>

                                                    </div>
                                                    <div class="modal-footer">
                                                        @using (Html.BeginForm("Delete", "RolesAdmin", FormMethod.Post, new { id = item.Id }))
                                                        {
                                                            @Html.AntiForgeryToken()
                                                            @Html.Hidden("id", item.Id)
                                                            <div class="form-actions no-color">
                                                                <button type="submit" value="Delete" class="btn btn-sm btn-danger">Delete</button>
                                                                <button type="button" class="btn btn-sm btn-default" data-dismiss="modal">Close</button>
                                                            </div>
                                                        }

                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                    </td>
                                </tr>
                            }

                        </table>
                    </div>

                </div>
                <div class="pull-right">
                    <span class="button-wrap">
                        <a href="@Url.Action("Create")" class="button button-pill button-raised button-primary">Create</a>
                    </span>
                </div>

            </div>
        </div>
    </div>
*@

<!----------Export all pages and all expanded detail Grids----------->

@*<div class="container">
  
    <p>
        @Html.ActionLink("Create New", "Create")
    </p>

    @(Html.Kendo().Grid<MDM.WebPortal.Models.Identity.RoleViewModel>()
          .Name("Roles")
          .ToolBar(tools => tools.Excel())

          .Excel(e => e.AllPages(true))

          .Columns(columns =>
          {
              columns.Bound(e => e.Name).Title("ROLE NAME").Width(110);

              columns.Bound(e => e.Active).Title("ACTIVE").Width(110);

              columns.Command(commands =>
              {
                  commands.Edit();
              }).Title("COMMANDS").Width(200);
          })
          .Sortable()

          .Pageable()

          .Scrollable(s => s.Enabled(false))

          .ClientDetailTemplateId("template")

          .Events(e => e.ExcelExport("employees_excelExport"))//new

          .DataSource(dataSource => dataSource
              .Ajax()
              .PageSize(10)
              .Model(model =>
              {
                  model.Id(x => x.Id);
                  model.Field(x => x.Id).Editable(false);
                  model.Field(x => x.Name).Editable(false);
              })
              .Events(events => events.Error("error_handler")) 
              .Read(read => read.Action("Read_Roles", "RolesAdmin"))
              .Update(x => x.Action("Update", "RolesAdmin"))
          )
        
          .Events(events => events.DataBound("dataBound"))
          )
</div>
<script src="~/Scripts/kendo/jszip.min.js"></script>

<script id="template" type="text/x-kendo-template">
    @(Html.Kendo().Grid<MDM.WebPortal.Models.ViewModel.VMUser>()
            .Name("User_#=Id#")

            .Columns(columns =>
            {
                columns.Bound(x => x.Id).Title("USER ID").Width(70);
                
                columns.Bound(o => o.Email).Title("USERNAME").Width(110);

                columns.Bound(o => o.Active).Width(300).Title("ACTIVE");
            })

            .DataSource(dataSource => dataSource
                .Ajax()

                .PageSize(10)

                .Read(read => read.Action("Read_UserOfrole", "RolesAdmin", new { roleID = "#=Id#" }))
            )
            .Events(e => e.ExcelExport("orders_excelExport"))//new

            .Pageable()

            .Sortable()

            .ToClientTemplate()
    )

</script>

<script>
    //new
    var detailExportPromises = [];

    var dataSource = new kendo.data.DataSource({
        type: "aspnetmvc-ajax",
        transport: {
            read: "@Url.Action("Read_UserOfrole", "RolesAdmin")",
            type: "POST"
            //data: {
            //roleID: function() {
            //    return $('#Id').val();
            //}
            //roleID: "6f3a5961-895d-4483-bb5d-f01fbe57423c"
            // }
        },
        schema: {
            data: "Data",
            total: "Total",
            error: "Errors"
        }
    });

    dataSource.read();

//new

    function dataBound() {
        detailExportPromises = []; //new

        this.expandRow(this.tbody.find("tr.k-master-row").first());
    }

    function orders_excelExport(e) {
        e.preventDefault();
    }

    function employees_excelExport(e) {
        e.preventDefault();

        var workbook = e.workbook;

        detailExportPromises = [];

        var masterData = e.data;

        for (var rowIndex = 0; rowIndex < masterData.length; rowIndex++) {
            exportChildData(masterData[rowIndex].Id, rowIndex);
        }

        // wait for all detail grids to finish exporting
        $.when.apply(null, detailExportPromises)
            .then(function() {
                // get the export results
                var detailExports = $.makeArray(arguments);

                // sort by masterRowIndex
                detailExports.sort(function(a, b) {
                    return a.masterRowIndex - b.masterRowIndex;
                });

                // add an empty column
                workbook.sheets[0].columns.unshift({ width: 30 });

                // prepend an empty cell to each row
                for (var i = 0; i < workbook.sheets[0].rows.length; i++) {
                    workbook.sheets[0].rows[i].cells.unshift({});
                }

                // merge the detail export sheet rows with the master sheet rows
                // loop backwards so the masterRowIndex doesn't need to be updated
                for (var i = detailExports.length - 1; i >= 0; i--) {
                    var masterRowIndex = detailExports[i].masterRowIndex + 1;

                    var sheet = detailExports[i].sheet;

                    // prepend an empty cell to each row
                    for (var ci = 0; ci < sheet.rows.length; ci++) {
                        if (sheet.rows[ci].cells[0].value) {
                            sheet.rows[ci].cells.unshift({});
                        }
                    }

                    // insert the detail sheet rows after the master row
                    [].splice.apply(workbook.sheets[0].rows, [masterRowIndex + 1, 0].concat(sheet.rows));
                }

                // save the workbook
                kendo.saveAs({
                    dataURI: new kendo.ooxml.Workbook(workbook).toDataURL(),
                    fileName: "ExportData.xlsx"
                });
            });
    }

    function exportChildData(Id, rowIndex) {
        var deferred = $.Deferred();

        detailExportPromises.push(deferred);

        var rows = [
            {
                cells: [
                    { value: "Id" },
                    { value: "Email" },
                    { value: "Active" }
                ]
            }
        ];

        dataSource.filter({ field: "roleID", operator: "eq", value: Id });

        var exporter = new kendo.ExcelExporter({
            columns: [
                { field: "Id" },
                { field: "USERNAME" },
                { field: "ACTIVE" }
            ],
            dataSource: dataSource
        });

        exporter.workbook().then(function(book, data) {
            deferred.resolve({
                masterRowIndex: rowIndex,
                sheet: book.sheets[0]
            });
        });
    }

    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function(key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function() {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    }
</script>*@

<!----------Export all pages and all expanded detail Grids----------->



<!----------Export all expanded detail Grids Function Perfectly------------------------->
<script src="http://kendo.cdn.telerik.com/2016.2.714/js/jszip.min.js"></script>

<div class="container-fluid">
    @(Html.Kendo().Grid<MDM.WebPortal.Models.Identity.RoleViewModel>()
        .Name("Roles")
        .ToolBar(tools => tools.Excel())
        .Columns(columns =>
        {
            columns.Bound(e => e.Name).Width(110);
            
            columns.Bound(e => e.Active).Width(110);
            
            columns.Command(commands =>
            {
                commands.Edit();
            }).Title("COMMANDS").Width(200);
        })
        .Sortable()
        .Pageable()
        .Filterable()
        .Scrollable(s => s.Enabled(false))
        .ClientDetailTemplateId("template")
        .Events(e => e.ExcelExport("employees_excelExport").DetailInit("employees_detailInit"))
        .DataSource(dataSource => dataSource
            .Ajax()
            .PageSize(10)
            .Model(model =>
              {
                model.Id(x => x.Id);
                model.Field(x => x.Id).Editable(false);
                model.Field(x => x.Name).Editable(false);
              })
            .Events(events => events.Error("error_handler")) 
            .Read(read => read.Action("Read_Roles", "RolesAdmin"))
            .Update(x => x.Action("Update", "RolesAdmin"))
        )
        .Events(events => events.DataBound("dataBound"))
    )
</div>



<script id="template" type="text/x-kendo-template">
    @(Html.Kendo().Grid<MDM.WebPortal.Models.ViewModel.VMUser>()
          .Name("User_#=Id#")
          .Columns(columns =>
          {
              columns.Bound(o => o.Id).Hidden(true);
              columns.Bound(o => o.Email).Width(110);
              columns.Bound(o => o.Active).Width(110);
          })
          .DataSource(dataSource => dataSource
              .Ajax()
              .PageSize(10)
              .Read(read => read.Action("Read_UserOfrole", "RolesAdmin", new {roleID = "#=Id#"}))
          )
          .Pageable()
          .Sortable()
          .ToClientTemplate()
          )
</script>

<script>
    function dataBound() {
        detailExportPromises = [];
        this.expandRow(this.tbody.find("tr.k-master-row").first());
    }

    var detailExportPromises = [];

    function employees_detailInit(e) {
        var deferred = $.Deferred();

        // get the index of the master row
        var masterRowIndex = e.masterRow.index(".k-master-row");

        // add the deferred to the list of promises
        detailExportPromises.push(deferred);

        var detailGrid = e.detailRow.find("[data-role=grid]").data("kendoGrid");

        detailGrid.bind("excelExport", function (e) {
            // prevent saving the file
            e.preventDefault();

            // resolve the deferred
            deferred.resolve({
                masterRowIndex: masterRowIndex,
                sheet: e.workbook.sheets[0]
            });
        });
    }

    function employees_excelExport(e) {
        // prevent saving the file because we will update the workbook
        e.preventDefault();

        var workbook = e.workbook;

        // Export all detail grids
        $("[data-role=grid]", this.element).each(function () {
            $(this).data("kendoGrid").saveAsExcel();
        });

        // wait for all detail grids to finish exporting
        $.when.apply(null, detailExportPromises)
        .then(function () {
            // get the export results
            var detailExports = $.makeArray(arguments);

            // sort by masterRowIndex
            detailExports.sort(function (a, b) {
                return a.masterRowIndex - b.masterRowIndex;
            });

            // add an empty column
            workbook.sheets[0].columns.unshift({ width: 30 });

            // prepend an empty cell to each row
            for (var i = 0; i < workbook.sheets[0].rows.length; i++) {
                workbook.sheets[0].rows[i].cells.unshift({});
            }

            // merge the detail export sheet rows with the master sheet rows
            // loop backwards so the masterRowIndex doesn't need to be updated
            for (var i = detailExports.length - 1; i >= 0; i--) {
                var masterRowIndex = detailExports[i].masterRowIndex + 1;

                var sheet = detailExports[i].sheet;

                // prepend an empty cell to each row
                for (var ci = 0; ci < sheet.rows.length; ci++) {
                    if (sheet.rows[ci].cells[0].value) {
                        sheet.rows[ci].cells.unshift({});
                    }
                }

                // insert the detail sheet rows after the master row
                [].splice.apply(workbook.sheets[0].rows, [masterRowIndex + 1, 0].concat(sheet.rows));
            }

            // save the workbook
            kendo.saveAs({
                dataURI: new kendo.ooxml.Workbook(workbook).toDataURL(),
                fileName: "ExportRoles.xlsx"
            });
        });
    }


    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    }
</script>
<!----------Export all expanded detail Grids------------------------->