@using System.Collections

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout1.cshtml";
}

<header class="main-header">
    <div class="container">
        <h1 class="page-title"></h1>
        <ol class="breadcrumb pull-right">
            <li><a href="@Url.Action("Index", "Home", new {area = ""})"><i class="fa fa-home"></i> Home</a></li>
            <li class="active">Menus</li>
        </ol>
    </div>
</header>

<div class="container-fluid">
    @(Html.Kendo().Grid<MDM.WebPortal.Models.ViewModel.VMMenu>()
          .Name("GridMenus")
          .ToolBar(tool =>
          {
              tool.Create().Text("NEW MENU");
              tool.Excel();
          })
          .Excel(e =>
          {
              e.AllPages(true);
              e.FileName("ExportMenus");
          })
          .Columns(column =>
          {
              column.Bound(x => x.MenuID).Hidden(true);

              column.Bound(x => x.Title).Width(110);

              //column.Bound(x => x.ActionID).Width(110);

              //column.Bound(x => x.ParentId).Width(110);

              column.ForeignKey(x => x.ActionID, (IEnumerable)ViewData["Actions"], "ActionID", "Info").Width(110);

              column.ForeignKey(x => x.ParentId, (IEnumerable)ViewData["Parent"], "ParentId", "Title").Width(110);
            
              column.Command(command =>
              {
                  command.Edit();
              }).Title("ACTIONS").Width(110);
          })
          .Editable(editable => editable.Mode(GridEditMode.InLine)) // Use inline editing mode
          .DataSource(datasource => datasource
              .Ajax()
              .ServerOperation(true)
              .PageSize(10)
              .Model(model =>
              {
                  model.Id(x => x.MenuID);
                  model.Field(x => x.MenuID).Editable(false);
              })
              .Events(events => events.Error("error_handler"))
              .Read(read => read.Action("Read_Menu", "Menus"))
              .Create(create => create.Action("Insert_Menu", "Menus"))
              .Update(update => update.Action("Update_Menu", "Menus"))
          )
          .Filterable()
          .Groupable()
          .Sortable()
          .Pageable(ps => ps.Refresh(true)
              .PreviousNext(true).PageSizes(true))
          )
</div>

<script src="~/Scripts/kendo/jszip.min.js"></script>
<script type="text/javascript">
    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            // Create a message containing all errors.
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            // Display the message
            alert(message);
            // Cancel the changes
            var grid = $("#GridMenus").data("kendoGrid");
            grid.cancelChanges();
        }
    }
</script>