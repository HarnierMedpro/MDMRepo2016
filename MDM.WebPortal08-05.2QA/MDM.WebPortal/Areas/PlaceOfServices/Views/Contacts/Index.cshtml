@using System.Collections
@using Kendo.Mvc.UI
@model IEnumerable<MDM.WebPortal.Models.FromDB.Contact>

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout1.cshtml";
}

<header class="main-header">
    <div class="container">
        <h1 class="page-title"></h1>
        <ol class="breadcrumb pull-right">
            <li><a href="@Url.Action("Index", "Home", new {area = ""})"><i class="fa fa-home"></i> Home</a></li>
            <li class="active">Contact</li>
        </ol>
    </div>
</header>

<div class="container-fluid">
    @(Html.Kendo().TabStrip()
      .Name("ContactTab")
      .SelectedIndex(0)
      .Animation(animation => animation.Open(open => open.Fade(FadeDirection.In)))
      .Items(elem =>
      {
          elem.Add().Text("CONTACTS").Content(@<text>
               @(Html.Kendo().Grid<MDM.WebPortal.Areas.PlaceOfServices.Models.ViewModels.VMContact>()
                  .Name("Contactos")
                  .ToolBar(tool =>
                  {
                      tool.Create().Text("NEW CONTACT");
                      tool.Excel();
                  })
                  .Excel(e =>
                  {
                      e.AllPages(true);
                      e.FileName("Export_Contacts");
                  })
                  .Columns(column =>
                  {
                      column.Bound(cnt => cnt.ContactID).Hidden(true);

                      column.Bound(cnt => cnt.FName).Width(110);

                      column.Bound(cnt => cnt.LName).Width(110);

                      column.Bound(cnt => cnt.PhoneNumber).Width(110);

                      column.Bound(cnt => cnt.Email).Width(110);

                      column.ForeignKey(cnt => cnt.ContactTypeID, (IEnumerable<MDM.WebPortal.Areas.PlaceOfServices.Models.ViewModels.VMContactType>)ViewData["ContactType"], "ContactTypeID", "ContactType_Name").Width(110);

                      column.Command(command =>
                      {
                          command.Edit();
                      }).Title("ACTIONS").Width(110);
                  })
                  .Sortable()
                  .Filterable()
                  .Groupable()
                  .Pageable(ps => ps.Refresh(true)
                    .PreviousNext(true).PageSizes(true))
                  .Editable(editable =>
                  {
                      editable.TemplateName("ContactViewModelEditor");
                      editable.Mode(GridEditMode.PopUp);
                  })
                  .DataSource(datasource => datasource
                      .Ajax()
                      .ServerOperation(true)
                      .PageSize(10)
                      .Model(model =>
                      {
                          model.Id(cnt => cnt.ContactID);
                          model.Field(cnt => cnt.ContactID).Editable(false);
                      })
                      .Events(events => events.Error("error_handler"))
                      .Read(read => read.Action("Read_Contact", "Contacts"))
                      .Create(create => create.Action("Create_Contact", "Contacts"))
                      .Update("Update_Contact", "Contacts")
                  )
            )
         </text>
    );

          elem.Add().Text("NEW CONTACT TYPE")
           .LoadContentFrom("ContactTypeList", "ContactTypes", new { area = "PlaceOfServices" });
      })
    )
</div>

@*<div class="container-fluid">
    @(Html.Kendo().Grid<MDM.WebPortal.Areas.PlaceOfServices.Models.ViewModels.VMContact>()
          .Name("Contactos")
          .ToolBar(tool =>
          {
              tool.Create().Text("NEW CONTACT");
              tool.Excel();
          })
          .Excel(e =>
          {
              e.AllPages(true);
              e.FileName("Export_Contacts");
          })
          .Columns(column =>
          {
              column.Bound(cnt => cnt.ContactID).Hidden(true);

              column.Bound(cnt => cnt.FName).Width(110);

              column.Bound(cnt => cnt.LName).Width(110);

              column.Bound(cnt => cnt.PhoneNumber).Width(110);

              column.Bound(cnt => cnt.Email).Width(110);

              column.ForeignKey(cnt => cnt.ContactTypeID, (IEnumerable<MDM.WebPortal.Areas.PlaceOfServices.Models.ViewModels.VMContactType>) ViewData["ContactType"], "ContactTypeID", "ContactType_Name").Width(110);

              column.Command(command =>
              {
                  command.Edit();
              }).Title("ACTIONS").Width(110);
          })
          .Sortable()
          .Filterable()
          .Groupable()
          .Editable(editable =>
          {
              editable.TemplateName("ContactViewModelEditor");
              editable.Mode(GridEditMode.PopUp);
          })
          .DataSource(datasource => datasource
              .Ajax()
              .ServerOperation(true)
              .PageSize(10)
              .Model(model =>
              {
                  model.Id(cnt => cnt.ContactID);
                  model.Field(cnt => cnt.ContactID).Editable(false);
              })
              .Events(events => events.Error("error_handler"))
              .Read(read => read.Action("Read_Contact", "Contacts"))
              .Create(create => create.Action("Create_Contact", "Contacts"))
              .Update("Update_Contact", "Contacts")
          )
          )
</div>*@

<script src="~/Scripts/kendo/jszip.min.js"></script>
<script>
    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            // Display the message
            alert(message);
            // Cancel the changes
            var grid = $("#Contactos").data("kendoGrid");
            grid.cancelChanges();
        }
    }
</script>


