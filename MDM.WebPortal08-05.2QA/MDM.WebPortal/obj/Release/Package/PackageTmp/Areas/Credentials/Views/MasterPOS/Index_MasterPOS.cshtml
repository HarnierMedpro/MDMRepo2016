@using Kendo.Mvc.UI
@using MDM.WebPortal.Areas.Credentials.Controllers
@using MDM.WebPortal.Areas.Credentials.Models.ViewModel
@model IEnumerable<MDM.WebPortal.Models.FromDB.MasterPOS>

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout1.cshtml";
}

<header class="main-header">
    <div class="container">
        <h1 class="page-title"></h1>
        <ol class="breadcrumb pull-right">
            <li><a href="@Url.Action("Index", "Home", new {area = ""})"><i class="fa fa-home"></i> Home</a></li>
            <li class="active">MasterPOS</li>
        </ol>
    </div>
</header>

@if (TempData["Error"] != null || TempData["Access"] != null)
{
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-6">
                <div class="alert alert-danger">
                    <a href="#" class="close" data-dismiss="alert" aria-label="Close">&times;</a>
                    <p>@TempData["Error"]</p>
                    <p>@TempData["Access"]</p>
                </div>
            </div>
        </div>
    </div>
}

<div class="container-fluid">
    @(Html.Kendo().Grid<VMMasterPOS>()
          .Name("AllPOS")
          .ToolBar(tool =>
          {
              tool.Create().Text("NEW POS");
              tool.Excel();
          })
          .Excel(e => e.AllPages(true))
          .Columns(column =>
          {
              column.Bound(p => p.MasterPOSID).Hidden();

              column.Bound(p => p.PosMasterName).Width(110);

              column.ForeignKey(p => p.FvPList_FvPID, (IEnumerable<MDM.WebPortal.Models.ViewModel.Delete.VMFvpList>)ViewData["FvPLists"], "FvPID", "FvPName").Width(50);

              column.ForeignKey(p => p.ManagerID, (IEnumerable<MDM.WebPortal.Areas.ManagerDBA.Models.ViewModels.VMManager_Master>)ViewData["Manager"], "ManagerID", "AliasName").Width(110);

              column.ForeignKey(p => p.ProvID, (IEnumerable<VMProvider>)ViewData["MedDirector"], "ProvID", "ProviderName").Width(110);

              column.ForeignKey(p => p.DB_ID, (IEnumerable<VMDBList>)ViewData["Database"], "DB_ID", "DB").Width(110);

              column.Bound(p => p.Corporation).Width(110);

              column.Bound(p => p.active).Width(70);

              column.Command(cmd =>
              {
                  cmd.Edit();
              }).Title("ACTIONS").Width(110);
          })

          .Editable(editable =>
          {
              editable.TemplateName("MasterPOSViewModelEditor");
              editable.Mode(GridEditMode.PopUp);
              editable.Window(w => w.Title("Master POS Details").Width(1000).AutoFocus(true));
          })
          .Events(e =>
          {
              e.DetailExpand("detailExpand");//Evento que se llama cuando se desplega los detalles de cada fila
          })
          .DataSource(source => source
              .Ajax()
              .ServerOperation(true)
              .PageSize(10)
              .Model(model =>
              {
                  model.Id(x => x.MasterPOSID);
                  model.Field(x => x.MasterPOSID).Editable(false);
              })
              .Events(ev =>
              {
                  ev.Error("posName_errorHandler");
                  /*Grid DataSource "Change" event: Si se va a modificar un row del grid se dispara este evento*/
                  ev.Change("onChangeInside");
              })
              .Read(read => read.Action("Read_MasterPOS", "MasterPOS"))
              .Create(create => create.Action("Create_MasterPOS", "MasterPOS"))
              .Update(update => update.Action("Update_MasterPOS", "MasterPOS"))
          )
          .ClientDetailTemplateId("template")
          .Filterable()
          .Sortable()
          .Pageable(ps => ps.Refresh(true)
              .PreviousNext(true).PageSizes(true))
          .Groupable()
          .Selectable(selectable => selectable
              .Mode(GridSelectionMode.Multiple)
              .Type(GridSelectionType.Cell))

    )
</div>

<script id="template" type="text/kendo-tmpl">
    @(Html.Kendo().TabStrip()
          .Name("tabStrip_#=MasterPOSID#")
          .SelectedIndex(0)
          .Animation(animation => animation.Open(open => open.Fade(FadeDirection.In)))
          .Items(tabs =>
          {
              tabs.Add().Text("ADDRESS").LoadContentFrom("AddressInfo", "POSAddressInfo", new { MasterPOSID = "#=MasterPOSID#", area = "Credentials" });

              tabs.Add().Text("LICENSE").LoadContentFrom("LicenseInfo", "FACInfoDatas", new { MasterPOSID = "#=MasterPOSID#", area = "Credentials" });

              tabs.Add().Text("EXTRA DATA").Content(@<text>  @RenderExtraData()  </text>);

              tabs.Add().Text("LEVEL OF CARE").Content(@<text>
                @(Html.Kendo().Grid<VMMasterPOS_LevOfCare>()
                           .Name("gridLevel_#=MasterPOSID#")
                           .ToolBar(tool =>
                           {
                               tool.Create().Text("NEW");
                           })
                           .Columns(columns =>
                           {
                               columns.Bound(o => o.MasterPosLocID).Hidden(true);
                               columns.Bound(o => o.MasterPOS_MasterPOSID).Hidden(true);
                               columns.ForeignKey(o => o.Lev_of_Care_LevOfCareID, (IEnumerable<VMLevelOfCare>)ViewData["LevOfCare"], "LevOfCareID", "LevOfCareName").Width(110);

                               columns.Command(command =>
                               {
                                   command.Edit();
                               }).Title("ACTIONS").Width(110);
                           })
                           .DataSource(dataSource => dataSource
                               .Ajax()
                               .PageSize(5)
                               .Model(model =>
                               {
                                   model.Id(x => x.MasterPosLocID);
                                   model.Field(x => x.MasterPosLocID).Editable(false);
                                   model.Field(x => x.MasterPOS_MasterPOSID).Editable(false);
                               })
                               .Events(events => events.Error("Lev_errorHandler"))
                               .Read(read => read.Action("Read_LevOfCareOfThisPos", "MasterPOS_LevOfCare", new { masterPOSID = "#=MasterPOSID#" }))
                               .Update(update => update.Action("Update_POS_LOfCare", "MasterPOS_LevOfCare"))
                               .Create(create => create.Action("Create_POS_LOfCare", "MasterPOS_LevOfCare", new { ParentID = "#=MasterPOSID#" }))
                           )
                           .Pageable(ps => ps.Refresh(true)
                               .PreviousNext(true).PageSizes(true))
                           .Sortable()
                           .ToClientTemplate())
              </text>); 

              tabs.Add().Text("SERVICES").Content(@<text>
                @(Html.Kendo().Grid<VMMasterPOS_MPServ>()
                          .Name("gridService_#=MasterPOSID#")
                          .ToolBar(tool =>
                          {
                              tool.Create().Text("NEW");
                          })
                          .Columns(columns =>
                          {
                              columns.Bound(o => o.MasterPosMPServID).Hidden(true);
                              columns.Bound(o => o.MasterPOS_MasterPOSID).Hidden(true);
                              columns.ForeignKey(o => o.MPServices_MPServID, (IEnumerable<VMMPService>)ViewData["Service"], "MPServID", "ServName").Width(110);

                              columns.Command(command =>
                              {
                                  command.Edit();
                              }).Title("ACTIONS").Width(110);
                          })
                          .DataSource(dataSource => dataSource
                              .Ajax()
                              .PageSize(5)
                              .Model(model =>
                              {
                                  model.Id(x => x.MasterPosMPServID);
                                  model.Field(x => x.MasterPosMPServID).Editable(false);
                                  model.Field(x => x.MasterPOS_MasterPOSID).Editable(false);
                              })
                              .Events(events => events.Error("ServError_handler"))
                              .Read(read => read.Action("Read_ServicesOfThisPOS", "MasterPOS_MPServ", new { masterPOSID = "#=MasterPOSID#" }))
                              .Update(update => update.Action("Update_POSService", "MasterPOS_MPServ"))
                              .Create(create => create.Action("Create_POSService", "MasterPOS_MPServ", new { ParentID = "#=MasterPOSID#" }))
                          )
                          .Pageable(ps => ps.Refresh(true)
                              .PreviousNext(true).PageSizes(true))
                          .Sortable()
                          .ToClientTemplate())
              </text>); 

              tabs.Add().Text("FAC INFO").LoadContentFrom("Facility_Info", "FacilityData", new { MasterPOSID = "#=MasterPOSID#", area = "Credentials" });

              tabs.Add().Text("PHYSICIAN GROUP").LoadContentFrom("PHYGrp_Info", "PHYGroups", new { MasterPOSID = "#=MasterPOSID#", area = "Credentials" });

              tabs.Add().Text("OWNERS").Content(@<text>
                @(Html.Kendo().Grid<VMContact>()
                       .Name("Owners_#=MasterPOSID#")
                       .Columns(col =>
                       {
                           col.Bound(o => o.ContactID).Hidden(true);

                           col.Bound(x => x.LName).Width(110);

                           col.Bound(x => x.FName).Width(110);

                           col.Bound(x => x.PhoneNumber).Width(110);

                           col.Bound(x => x.Email).Width(110);

                           col.Bound(x => x.active).Width(110);
                       })
                       .DataSource(source => source.Ajax()
                           .ServerOperation(true)
                           .PageSize(5)
                           .Read(read => read.Action("Read_OwnersOfThisPos", "MasterPOS", new { masterPOSID = "#=MasterPOSID#", area = "Credentials" }))
                       )
                       .Sortable()
                       .Filterable()
                       .Pageable(ps => ps.Refresh(true)
                           .PreviousNext(true).PageSizes(true))
                       .ToClientTemplate()
                )
              </text>);

              tabs.Add().Text("CONTACTS").Content(@<text>
                @(Html.Kendo().Grid<VMPosContact>()
                            .Name("PosContactGrid_#=MasterPOSID#")
                            .ToolBar(tool =>
                            {
                                tool.Create().Text("NEW");
                                tool.Custom().Text("CHOOSE").Url("javascript:customCommand(#=MasterPOSID#)");
                            })
                                    .Columns(column =>
                                    {
                                        column.Bound(x => x.ContactID).Hidden(true);

                                        column.Bound(x => x.LName).Width(110);

                                        column.Bound(x => x.FName).Width(110);

                                        column.Bound(x => x.PhoneNumber).Width(110);

                                        column.Bound(x => x.Email).Width(110);

                                        column.Bound(x => x.active).Width(110);

                                        column.Command(cmd =>
                                        {
                                            cmd.Edit();
                                        }).Title("ACTIONS").Width(110);
                                    })
                                    .Editable(editable =>
                                    {
                                        editable.TemplateName("PosCntViewModelEditor");
                                        editable.Mode(GridEditMode.PopUp);
                                    })
                                    .DataSource(datasource => datasource
                                        .Ajax()
                                        .ServerOperation(true)
                                        .PageSize(10)
                                        .Model(model =>
                                        {
                                            model.Id(x => x.ContactID);
                                            model.Field(x => x.ContactID).Editable(false);
                                        })
                                        .Events(ev => ev.Error("POSContact_ErrorHandler").RequestEnd("editPosCnt"))
                                        .Read(read => read.Action("Read_POSContacts", "Contacts", new { masterPOSID = "#=MasterPOSID#" }))
                                        .Create(create => create.Action("Create_MasterPOSContact", "Contacts", new { posName = "#=MasterPOSID#" }))
                                        .Update(update => update.Action("Update_Contact", "Contacts"))
                                    )
                                    .Sortable()
                                    .Filterable()
                                    .Groupable()
                                    .Pageable(ps => ps.Refresh(true)
                                        .PreviousNext(true).PageSizes(true))
                                    .ToClientTemplate()
                )
              </text>);

              tabs.Add().Text("ATTACHMENTS").LoadContentFrom("Index", "POSFiles", new { locationPOSID = "#=MasterPOSID#" });
              //tabs.Add().Text("ATTACHMENTS").LoadContentFrom("PosFiles", "POSFiles", new { masterPOSID = "#=MasterPOSID#" });

              tabs.Add().Text("FORMS_SENT").Content(@<text>
                @(Html.Kendo().Grid<VMForms_Sent>()
                      .Name("FormsGrid_#=MasterPOSID#")
                      .ToolBar(tool => tool.Create().Text("NEW"))
                      .Columns(col =>
                      {
                          col.Bound(x => x.FormSentID).Hidden(true);

                          col.Bound(x => x.MasterPOS_MasterPOSID).Hidden(true).Width(110);

                          col.ForeignKey(x => x.FormsDict_FormsID, (IEnumerable<VMFormsDict>)ViewData["Forms"], "FormsID", "FormName").Width(110);

                          col.Command(cmd =>
                          {
                              cmd.Edit();
                          }).Title("ACTIONS").Width(110);
                      })
                      .DataSource(source => source
                          .Ajax()
                          .ServerOperation(true)
                          .PageSize(5)
                          .Model(model =>
                          {
                              model.Id(x => x.FormSentID);
                              model.Field(x => x.FormSentID).Editable(false);
                              model.Field(x => x.MasterPOS_MasterPOSID).Editable(false);
                          })
                          .Events(e => e.Error("formsSent_ErrorHandler"))
                          .Read(read => read.Action("Read_FormsOfThisPOS", "Forms_Sent", new { masterPOSID = "#=MasterPOSID#" }))
                          .Create(create => create.Action("Create_FormsSent", "Forms_Sent", new { posName = "#=MasterPOSID#" }))
                          .Update(update => update.Action("Update_FormsSent", "Forms_Sent", new { MasterPOS_MasterPOSID = "#=MasterPOSID#" }))
                      )
                      .Pageable(ps => ps.Refresh(true)
                          .PreviousNext(true).PageSizes(true))
                      .Sortable()
                      .ToClientTemplate()
                )
              </text>);

              tabs.Add().Text("POS IDs").Content(@<text>
                @(Html.Kendo().Grid<VMPosIds>()
                           .Name("posId_#=MasterPOSID#")
                           .Columns(col =>
                           {
                               col.Bound(x => x.ZoomDBPOSID).Hidden(true);

                               col.Bound(x => x.MasterPOSID).Hidden(true);

                               col.Bound(x => x.Extra).Width(110);

                               col.Bound(x => x.ZoomPos_ID).Width(110);

                               col.Bound(x => x.ZoomPos_Name).Width(110);

                               col.Bound(x => x.Active).Width(110);
                           })
                           .DataSource(source => source
                               .Ajax()
                               .ServerOperation(true)
                               .PageSize(5)
                               .Read(read => read.Action("Read_PosIds", "ZoomDB_POSID_grp", new { masterPOSID = "#=MasterPOSID#" }))
                           )
                           .Pageable(ps => ps.Refresh(true)
                               .PreviousNext(true).PageSizes(true))
                           .Sortable()
                           .Filterable()
                           .ToClientTemplate()
                )
            </text>);

          })
.ToClientTemplate()
)

@helper RenderExtraData()
{
    @(Html.Kendo().TabStrip()
         .Name("tabExtData_#=MasterPOSID#")
         .SelectedIndex(0)
         .Animation(animation => animation.Open(open => open.Fade(FadeDirection.In)))
         .Items(ext =>
         {
             ext.Add().Text("INFO").LoadContentFrom("ExtraInfo_Detail", "POSExtraDatas", new { MasterPOSID = "#=MasterPOSID#", area = "Credentials" });
             ext.Add().Text("QUESTIONS").LoadContentFrom("ExtraQuestion_Detail", "POSExtraDatas", new { MasterPOSID = "#=MasterPOSID#", area = "Credentials" });
         })
         .ToClientTemplate()
    )
}

<!--Contact Window-->
<div style="display:none">
        @(Html.Kendo().Window()
           .Name("windowChoose_#=MasterPOSID#")
           .Width(630)
           .Height(315)
           .Actions(actions => actions.Minimize().Maximize().Close())
           .AutoFocus(true)
           .Visible(false)
           .Title("CHOOSE CONTACTS")
           .Draggable()
           .Resizable()
              .Content(@<text>
            @(Html.Kendo().MultiSelect()
                        .Name("corpCnt_#=MasterPOSID#")
                        .DataTextField("Email")
                        .DataValueField("ContactID")
                        .Placeholder("Select contacts...")
                        .DataSource(source =>
                        {
                            source.Custom()
                                .ServerFiltering(true)
                                .ServerPaging(true)
                                .PageSize(80)
                                .Type("aspnetmvc-ajax")
                                .Transport(transport =>
                                {
                                    transport.Read("Read_AvailablePOSContacts", "Contacts", new { masterPOSID = "#=MasterPOSID#" });
                                })
                                .Schema(schema =>
                                {
                                    schema.Data("Data") //define the [data](http://docs.telerik.com/kendo-ui/api/javascript/data/datasource#configuration-schema.data) option
                                        .Total("Total"); //define the [total](http://docs.telerik.com/kendo-ui/api/javascript/data/datasource#configuration-schema.total) option
                                });
                        })
                        .ToClientTemplate())
            <br />
            <div class="text-center">
                <a id="#=MasterPOSID#" class="btn btn-sm btn-default" href="\\#" onclick="return CheckRequired(this.id);"><span class="fa fa-cloud-upload"></span>Save</a>
            </div>
            <br />
            </text>)
.ToClientTemplate()
              )
</div>
    
<!--Phy Grp Window-->
<div style="display:none">
        @(Html.Kendo().Window()
        .Name("wdwGrp_#=MasterPOSID#")
        .Width(630)
        .Height(315)
        .Actions(actions => actions.Minimize().Maximize().Close())
        .AutoFocus(true)
        .Visible(false)
        .Title("CHOOSE PHYSICIAN GROUP")
        .Draggable()
        .Resizable()
        .Content(@<text>
            @(Html.Kendo().DropDownList()
                  .Name("phyGrp_#=MasterPOSID#")
                  .DataTextField("PHYGroupName")
                  .DataValueField("PHYGrpID")
                  .MinLength(3)
                  .HtmlAttributes(new { style = "width:100%" })
                  .Height(290)
                  .Filter(FilterType.Contains)
                  .DataSource(source =>
                  {
                      source.Custom()
                          .ServerFiltering(true)
                          .ServerPaging(true)
                          .PageSize(80)
                          .Type("aspnetmvc-ajax") 
                          .Transport(transport =>
                          {
                              transport.Read("Read_Groups", "PHYGroups");
                          })
                          .Schema(schema =>
                          {
                              schema.Data("Data") 
                                    .Total("Total"); 
                          });
                  })
                 .ToClientTemplate()
                  )
            <br />
            <br />
            <div class="text-center">
                <a id="#=MasterPOSID#" class="btn btn-sm btn-default" href="\\#" onclick="return sendPhyGrp(this.id);"><span class="fa fa-cloud-upload"></span>Save</a>
            </div>
            <br />
        </text>)
        .ToClientTemplate()
              )
    </div>
    
<!--POS File Window-->
@*<div style="display:none">
    @(Html.Kendo().Window()
        .Name("wdwNewFile_#=MasterPOSID#")
        .Width(630)
        .Height(500)
        .Actions(actions => actions.Minimize().Maximize().Close())
        .AutoFocus(true)
        .Visible(false)
        .Title("UPLOAD POS FILES")
        .Draggable()
        .Resizable()
          .Content(@<text>
            
            <fieldset class="scheduler-border">
                <legend class="scheduler-border text-bold text-uppercase">file:</legend>
                <dl>
                    <dt>
                        @(Html.Kendo().Upload()
                            .Name("fichero_#=MasterPOSID#")
                            .Multiple(false)
                            //.Events(ev => ev.Select("onSelectFile"))
                            //.TemplateId("fileTemplate") Me esta dando un error que tengo que corregir
                            .ToClientTemplate()
                        )
                    </dt>
                </dl>

                <dl>
                    <dd>
                        <label class="text-uppercase">description<sup class="text-danger">*</sup></label>
                    </dd>
                    <dt>
                        @Html.Editor("Description", new { htmlAttributes = new { id = "tbDes_#=MasterPOSID#", @style = "width:100%; border-radius:3px !important; height:26px;" } })
                    </dt>
                </dl>

                <dl>
                    <dd>
                        <label class="text-uppercase">pos classification<sup class="text-danger">*</sup></label>
                    </dd>
                    <dt>
                        @(Html.Kendo().DropDownList()
                              .Name("FileTypeID_#=MasterPOSID#")
                              .AutoBind(false)
                              .DataTextField("FileType_Name")
                              .DataValueField("FileTypeID")
                              .HtmlAttributes(new { style = "width: 100%" })
                              .DataSource(source =>
                              {
                                  source.Custom()
                                      .ServerFiltering(true)
                                      .ServerPaging(true)
                                      .PageSize(80)
                                      .Type("aspnetmvc-ajax")
                                      .Transport(transport =>
                                      {
                                          transport.Read("Read_PosFileType", "FileTypeIs");
                                      })
                                      .Schema(schema =>
                                      {
                                          schema.Data("Data")
                                              .Total("Total");
                                      });
                              })
                              .ToClientTemplate()
                        )
                    </dt>
                </dl>        
            </fieldset>

            <br />
            <div class="text-center">
                <a id="#=MasterPOSID#" class="btn btn-sm btn-default" href="\\#" onclick="return UploadPosFile(this.id);"><span class="fa fa-cloud-upload"></span>Save</a>
            </div>
            <br />
        </text>)
        .ToClientTemplate()
    )
</div>*@

</script>

<script src="~/Scripts/jquery.signalR-2.1.2.min.js"></script>
<script src="~/signalr/hubs"></script>
<script src="~/Scripts/lib/Notify/notify.min.js"></script>

<script>
/*Evento que se dispara cada vez que se cambia la BD al crear o editar un POS*/
function onChange() {
    $("#PosIDs").data('kendoMultiSelect').dataSource.read();
}

/*Evento que se dispara cuando se esta actualizando un objeto LocationPOS, 
especificamente cuando se esta modificando el tipo de POS: FAC o PHY*/
function onChangeInside(e) {
    if (e.action === "itemchange") { //primero me cersioro de que sea mientras se esta haciendo un update
        if (e.field === "FvPList_FvPID") { //especificamente cuando se esta modificando el tipo de POS: "FAC" or "PHY"
            var model = e.items[0]; //Obtengo el row completo del objeto que se esta actualizando
            var type = model.get("FvPList_FvPID"); //obtengo el PK del nuevo tipo seleccionado, en este caso FAC es 1 y PHY es 2
            var pk = model.get("MasterPOSID"); //obtengo el valor del primary key del correspondiente LocationPOS object

            if (type === 2 || type === 3) { //Si el tipo de POS es PHY entonces muestro el tab 2: "Physician Group"
                $($("#tabStrip_" + pk).data("kendoTabStrip").items()[6]).attr("style", "display:true");
                $($("#tabStrip_" + pk).data("kendoTabStrip").items()[5]).attr("style", "display:none");
                $($("#tabStrip_" + pk).data("kendoTabStrip").items()[1]).attr("style", "display:none");
                $($("#tabStrip_" + pk).data("kendoTabStrip").items()[3]).attr("style", "display:none");
            } else {
                $($("#tabStrip_" + pk).data("kendoTabStrip").items()[6]).attr("style", "display:none");
                $($("#tabStrip_" + pk).data("kendoTabStrip").items()[5]).attr("style", "display:true");
                $($("#tabStrip_" + pk).data("kendoTabStrip").items()[1]).attr("style", "display:true");
                $($("#tabStrip_" + pk).data("kendoTabStrip").items()[3]).attr("style", "display:true");
            }
        }
    }
}

/*Evento que se dispara cada vez que se expande una fila para acceder a los detalles de la misma*/
function detailExpand(e) {
    var rowPK = e.sender.dataItem(e.masterRow).MasterPOSID; //Obtengo el row completo del objeto que se esta actualizando
    var type = e.sender.dataItem(e.masterRow).FvPList_FvPID; //obtengo el PK del nuevo tipo seleccionado, en este caso FAC es 1 y PHY es 2
    if (type === 1) {
        //alert("FAC");
        $($("#tabStrip_" + rowPK).data("kendoTabStrip").items()[6]).attr("style", "display:none");
        $($("#tabStrip_" + rowPK).data("kendoTabStrip").items()[1]).attr("style", "display:true");
        $($("#tabStrip_" + rowPK).data("kendoTabStrip").items()[3]).attr("style", "display:true");
        $($("#tabStrip_" + rowPK).data("kendoTabStrip").items()[5]).attr("style", "display:true");
    } else {
        //alert("PHY");
        $($("#tabStrip_" + rowPK).data("kendoTabStrip").items()[6]).attr("style", "display:true");
        $($("#tabStrip_" + rowPK).data("kendoTabStrip").items()[1]).attr("style", "display:none");
        $($("#tabStrip_" + rowPK).data("kendoTabStrip").items()[3]).attr("style", "display:none");
        $($("#tabStrip_" + rowPK).data("kendoTabStrip").items()[5]).attr("style", "display:none");
    }
}

/*Activate Windows Functions*/
function customCommand(e) {
    $("#windowChoose_" + e).data("kendoWindow").open().center();
}

function openWindow(h) {
    $("#wdwGrp_" + h).data("kendoWindow").open().center();
}

function activeWdwPosFile(z) {
    $("#wdwNewFile_" + z).data("kendoWindow").open().center();
}

/*AJAX Request Functions*/
function sendPhyGrp(t) {
    var drpdown = $("#phyGrp_" + t).data("kendoDropDownList");
    var dataItem = drpdown.dataItem();

    var domainName = "http://" + window.location.host.toString();
    $.ajax({
        type: "POST",
        url: domainName + '/PHYGroups/Assign_PhyGrpToPos',
        data: {
            MasterPOSID: t,
            PHYGrpID: dataItem.PHYGrpID
        },
        success: function (data) {
            if (data.length === 0) {
                alert("Something failed. Please try again!");
            }
            $("#wdwGrp_" + t).data("kendoWindow").close();
            var listV = $("#lV_" + t).data("kendoListView");
            listV.dataSource.read();
            //location.reload();
        },
        complete: function (xhr, success) { },
        error: function (xhr, ajaxOptions, thrwnError) {
            alert('Something failed. Please try again!');
        }
    });
}

function CheckRequired(d) {
    var multiselect = $("#corpCnt_" + d).data("kendoMultiSelect");
    var list = multiselect.dataItems();
    if (list.length === 0) {
        $("#corpCnt_9").notify("You have to select at least one Contact. Try again!",
            {
                position: "bottom left",
                className: 'error'
            }
        );
    } else {
        var domainName = "http://" + window.location.host.toString();
        var info = [];
        for (i = 0; i < list.length; i++) {
            info.push(list[i].ContactID);
        }
        $.ajax({
            type: "POST",
            url: domainName + '/MasterPOS_Contact/Save_POSContacts',
            data: {
                MasterPOSID: d,
                Contacts: info
            },
            success: function (data) {
                if (data.length === 0) {
                    alert("Something failed. Please try again!");
                }
                $("#windowChoose_" + d).data("kendoWindow").close();
                var grid = $("#PosContactGrid_" + d).data("kendoGrid");
                grid.dataSource.read();

            },
            complete: function (xhr, success) { },
            error: function (xhr, ajaxOptions, thrwnError) {
                alert('Something failed. Please try again!');
            }
        });
    }
}

//var fichero;
//function onSelectFile(e) {
//    fichero = e.files;
//};

//function UploadPosFile(g) {
//    var drpdown = $("#FileTypeID_"+g).data("kendoDropDownList");
//    var dataItem = drpdown.dataItem();
//    var description = $("#tbDes_" + g).val();
//    var domainName = "http://" + window.location.host.toString();

//    var files = fichero;
//    if (files.length > 0) {
       
//        if (window.FormData !== undefined) {
            
//            var data = new FormData();
//            for (var x = 0; x < files.length; x++) {
               
//                data.append(files[x].name, files[x]);
//            }
           
//            $.ajax({
//                type: "POST",
//                url: domainName + '/POSFiles/Upload',
//                contentType: false,
//                processData: false,
//                data: data,
//                success: function (result) {
//                    console.log(result);
//                },
//                error: function (xhr, status, p3, p4) {
//                    var err = "Error " + " " + status + " " + p3 + " " + p4;
//                    if (xhr.responseText && xhr.responseText[0] == "{")
//                        err = JSON.parse(xhr.responseText).Message;
//                    console.log(err);
//                }
//            });
//        } else {
//            alert("This browser doesn't support HTML5 file uploads!");
//        }
//    }

    
//    //$.ajax({
//    //    type: "POST",
//    //    url: domainName + '/POSFiles/Upload',
//    //    contentType: false,
//    //    processData: false,
//    //    //data: {
//    //    //    MasterPOSID: g,
//    //    //    FileTypeID: dataItem.FileTypeID,
//    //    //    Description: description,
//    //    //    files: file
//    //    //},
//    //    data:data,
//    //    success: function (data) {
//    //        if (data.length === 0) {
//    //            alert("Something failed. Please try again!");
//    //        }
//    //        $("#wdwNewFile_" + g).data("kendoWindow").close();
//    //        var listV = $("#lvFiles_" + g).data("kendoListView");
//    //        listV.dataSource.read();
//    //        //location.reload();
//    //    },
//    //    complete: function (xhr, success) { },
//    //    error: function (xhr, ajaxOptions, thrwnError) {
//    //        alert('Something failed. Please try again!');
//    //    }
//    //});
//}


/*Error Handler functions*/
$(function notifyDuplications() {
    var connection = $.hubConnection();
    var hub = connection.createHubProxy("MasterPOS");
    hub.on("notifyIfDuplicatePosIDs", function (notificacion) {
        $.notify(notificacion);
    });
    connection.start(function () {
        hub.invoke("doIfDuplicatePosIds");
    });
});

function posName_errorHandler(e) {
    if (e.errors) {
        var message = "Errors:\n";
        $.each(e.errors, function (key, value) {
            if ('errors' in value) {
                $.each(value.errors, function () {
                    message += this + "\n";
                });
            }
        });
        alert(message);
        var grid = $("#AllPOS").data("kendoGrid");
        grid.cancelChanges();
    }
}

function Lev_errorHandler(e) {
    if (e.errors) {
        var message = "Errors:\n";
        $.each(e.errors, function (key, value) {
            if ('errors' in value) {
                $.each(value.errors, function () {
                    message += this + "\n";
                });
            }
        });
        alert(message);
        var grid = jQuery("[id^='gridLevel_']").data("kendoGrid");
        grid.cancelChanges();
    }
}

function ServError_handler(e) {
    if (e.errors) {
        var message = "Errors:\n";
        $.each(e.errors, function (key, value) {
            if ('errors' in value) {
                $.each(value.errors, function () {
                    message += this + "\n";
                });
            }
        });
        alert(message);
        var grid = jQuery("[id^='gridService_']").data("kendoGrid");
        grid.cancelChanges();
    }
}

function POSContact_ErrorHandler(e) {
    if (e.errors) {
        var message = "Errors:\n";
        $.each(e.errors, function (key, value) {
            if ('errors' in value) {
                $.each(value.errors, function () {
                    message += this + "\n";
                });
            }
        });
        alert(message);
        var grid = jQuery("[id^='PosContactGrid_']").data("kendoGrid");
        grid.cancelChanges();
    }
}

function formsSent_ErrorHandler(e) {
    if (e.errors) {
        var message = "Errors:\n";
        $.each(e.errors, function (key, value) {
            if ('errors' in value) {
                $.each(value.errors, function () {
                    message += this + "\n";
                });
            }
        });
        alert(message);
        var grid = jQuery("[id^='FormsGrid_']").data("kendoGrid");
        grid.cancelChanges();
    }
}

function extraInfoDetailErrorHandler(e) {
    if (e.errors) {
        var message = "Errors:\n";
        $.each(e.errors, function (key, value) {
            if ('errors' in value) {
                $.each(value.errors, function () {
                    message += this + "\n";
                });
            }
        });
        alert(message);
        var lv = jQuery("[id^='lvInfo_']").data("kendoListView");
        //var lv = $("#lvInfo_" + e.MasterPOSID).data("kendoListView");
        lv.refresh();
    }
}

function extraQuestionErrorHandler(e) {
    if (e.errors) {
        var message = "Errors:\n";
        $.each(e.errors, function (key, value) {
            if ('errors' in value) {
                $.each(value.errors, function () {
                    message += this + "\n";
                });
            }
        });
        alert(message);
        var lv = jQuery("[id^='lvQuestion_']").data("kendoListView");
        lv.cancel();
    }
}

function addressInfoErrorHandler(e) {
    if (e.errors) {
        var message = "Errors:\n";
        $.each(e.errors, function (key, value) {
            if ('errors' in value) {
                $.each(value.errors, function () {
                    message += this + "\n";
                });
            }
        });
        alert(message);
        var lv = jQuery("[id^='lVAddress_']").data("kendoListView");
        lv.cancel();
    }
}

function licenseInfoErrorHandler(e) {
    if (e.errors) {
        var message = "Errors:\n";
        $.each(e.errors, function (key, value) {
            if ('errors' in value) {
                $.each(value.errors, function () {
                    message += this + "\n";
                });
            }
        });
        alert(message);
        var lv = jQuery("[id^='listVLicense_']").data("kendoListView");
        lv.cancel();
    }
}

function facInfoErrorHandler(e) {
    if (e.errors) {
        var message = "Errors:\n";
        $.each(e.errors, function (key, value) {
            if ('errors' in value) {
                $.each(value.errors, function () {
                    message += this + "\n";
                });
            }
        });
        alert(message);
        var lv = jQuery("[id^='lvFacility_']").data("kendoListView");
        lv.cancel();
    }
}

function phyErrorHandler(e) {
    if (e.errors) {
        var message = "Errors:\n";
        $.each(e.errors, function (key, value) {
            if ('errors' in value) {
                $.each(value.errors, function () {
                    message += this + "\n";
                });
            }
        });
        alert(message);
        var lv = jQuery("[id^='lV_']").data("kendoListView");
        lv.cancel();
    }
}
    
function editPosCnt(e) {
    var type = e.type;
    if (type === "update") {
        var response = e.response.Data[0].active;
        if (response === false) {
            this.read();
        }
    }
}
   
</script>

