@model IEnumerable<MDM.WebPortal.Models.FromDB.MasterUserList>

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout1.cshtml";
}
<script src="~/Scripts/kendo/jszip.min.js"></script>
<div class="admin-container">
    <h2 class="section-title">MasterUserList - Index</h2>
    <p>
        @Html.ActionLink("Create New", "Create")
    </p>

    @(Html.Kendo().Grid<MDM.WebPortal.Models.FromDB.MasterUserList>()
            .Name("GridMaster")
            .DataSource(dataSource => dataSource
                  .Ajax()
                  .ServerOperation(true)
                  .PageSize(10)
                  .Model(model =>
                  {
                      model.Id(x => x.id); // Specify the property which is the unique identifier of the model
                      model.Field(x => x.id).Editable(false); // Make the ProductID property not editable
                  })
                                .Update(update => update.Action("Update", "MasterUserLists"))  // Action invoked when the user saves an updated data item
                                .Read(read => read.Action("Read", "MasterUserLists")) // Set the action method which will return the data in JSON format
                       //.Destroy(destroy => destroy.Action("Products_Destroy", "CollNoteTypeCatPriorities")) // Action invoked when the user removes a data item
               )

            .Columns(columns =>
            {

                columns.Bound(x => x.ADP_ID).Width(300);

                columns.Bound(p => p.EmployeeName).Width(300);

                columns.Bound(p => p.Edgemed_UserName).Width(300);

                columns.Bound(p => p.ZoomServer).Width(300);
                columns.Bound(p => p.EdgeMed_ID).Width(300);

                columns.Bound(p => p.Job_Title).Width(300);

                columns.Bound(x => x.Staff_Manager).Width(300);
                
                columns.Bound(x => x.User_Active).Title("Active").Width(300);

                columns.Bound(x => x.Type).Width(300);

                columns.Command(commands =>
                {
                    commands.Edit(); // The "edit" command will edit and update data items
                    //commands.Destroy(); // The "destroy" command removes data items
                }).Title("Commands").Width(200);
            })
                    
            .ToolBar(tools => tools.Excel())
                        .Excel(excel => excel
                            .AllPages(true)
                            .FileName("ExportData.xlsx")
                            .Filterable(false)
                                .ProxyURL(Url.Action("Excel_Export_Save", "MasterUserList")))

                    .Filterable()
                    .Pageable(ps => ps.Refresh(true)
                    .PreviousNext(true).PageSizes(true))
                    .Sortable()
                    .Groupable()
                    .Reorderable(r => r.Columns(true))
                    .Resizable(r => r.Columns(true))
                    .Selectable(s => s.Enabled(true)
                                                .Type(GridSelectionType.Row)
                                                .Mode(GridSelectionMode.Single))
     )
</div>



