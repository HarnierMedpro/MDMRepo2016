@using Kendo.Mvc.UI
@using MDM.WebPortal.Areas.Credentials.Controllers
@using MDM.WebPortal.Areas.Credentials.Models.ViewModel
@model IEnumerable<MDM.WebPortal.Models.FromDB.MasterPOS>

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout1.cshtml";
}

@*<script type="text/kendo" id="posTemplate">
    <ul>
        #for(var i = 0; i< data.length; i++){#
        <li>#:data[i].ZoomPos_Name#</li>
        #}#
    </ul>
</script>

<script type="text/javascript">
    var posTemplate = kendo.template($("#posTemplate").html(), { useWithBlock: false });
</script>*@

<header class="main-header">
    <div class="container">
        <h1 class="page-title"></h1>
        <ol class="breadcrumb pull-right">
            <li><a href="@Url.Action("Index", "Home", new {area = ""})"><i class="fa fa-home"></i> Home</a></li>
            <li class="active">MasterPOS</li>
        </ol>
    </div>
</header>

<div class="container-fluid">
    @(Html.Kendo().Grid<VMMasterPOS>()
          .Name("AllPOS")
          .ToolBar(tool =>
          {
              tool.Create().Text("NEW POS");
              tool.Excel();
          })
          .Excel(e => e.AllPages(true))
          .Columns(column =>
          {
              column.Bound(p => p.MasterPOSID).Hidden();

              column.Bound(p => p.PosMasterName).Width(110);

              column.ForeignKey(p => p.FvPList_FvPID, (IEnumerable<MDM.WebPortal.Models.ViewModel.Delete.VMFvpList>) ViewData["FvPLists"], "FvPID", "FvPName").Width(50);

              //column.Bound(p => p.ManagerID).Width(110);
              column.ForeignKey(p => p.ManagerID, (IEnumerable<MDM.WebPortal.Areas.ManagerDBA.Models.ViewModels.VMManager_Master>) ViewData["Manager"], "ManagerID", "AliasName").Width(110);

              //column.Bound(p => p.ProvID).Width(110);
              column.ForeignKey(p => p.ProvID, (IEnumerable<VMProvider>) ViewData["MedDirector"], "ProvID", "ProviderName").Width(110);

              //column.Bound(p => p.DB_ID).Width(110);
              column.ForeignKey(p => p.DB_ID, (IEnumerable<VMDBList>) ViewData["Database"], "DB_ID", "DB").Width(110);

              column.Bound(p => p.Corporation).Width(110);

              column.Bound(p => p.active).Width(70);

              //column.Bound(e => e.PosIDs).ClientTemplate("#=posTemplate(PosIDs)#").Width(110).Filterable(false).Sortable(false);

              column.Command(cmd =>
              {
                  cmd.Edit();
              }).Title("ACTIONS").Width(110);
          })
          
          .Editable(editable =>
          {
              editable.TemplateName("MasterPOSViewModelEditor");
              editable.Mode(GridEditMode.PopUp);
              editable.Window(w => w.Title("Master POS Details").Width(1000).AutoFocus(true));
          })
          .Events(e =>
          {
              e.DetailExpand("detailExpand");//Evento que se llama cuando se desplega los detalles de cada fila
          })
          .DataSource(source => source
              .Ajax()
              .ServerOperation(true)
              .PageSize(10)
              .Model(model =>
              {
                  model.Id(x => x.MasterPOSID);
                  model.Field(x => x.MasterPOSID).Editable(false);
              })
              .Events(ev =>
              {
                  ev.Error("posName_errorHandler");
                  /*Grid DataSource "Change" event: Si se va a modificar un row del grid se dispara este evento*/
                  ev.Change("onChangeInside"); 
              })
              .Read(read => read.Action("Read_MasterPOS", "MasterPOS"))
              .Create(create => create.Action("Create_MasterPOS", "MasterPOS"))
              .Update(update => update.Action("Update_MasterPOS", "MasterPOS"))
          )
          .ClientDetailTemplateId("template")
          .Filterable()
          .Sortable()
          .Pageable(ps => ps.Refresh(true)
              .PreviousNext(true).PageSizes(true))
          .Groupable()
          .Selectable(selectable => selectable
              .Mode(GridSelectionMode.Multiple)
              .Type(GridSelectionType.Cell))
          
          )@*POSName Grid END*@
</div>

<script id="template" type="text/kendo-tmpl">
    @(Html.Kendo().TabStrip()
          .Name("tabStrip_#=MasterPOSID#")
          .SelectedIndex(0)
          .Animation(animation => animation.Open(open => open.Fade(FadeDirection.In)))
          .Items(tabs =>
          {
              tabs.Add().Text("ADDRESS")
                  .LoadContentFrom("Details", "POSAddressInfo", new {id = "#=MasterPOSID#", area = "Credentials"});

              tabs.Add().Text("LICENSE").LoadContentFrom("Details", "FACInfoDatas", new {id = "#=MasterPOSID#", area = "Credentials"});

              tabs.Add().Text("EXTRA DATA");

              tabs.Add().Text("LEVEL OF CARE").Content(@<text>
                 @(Html.Kendo().Grid<VMMasterPOS_LevOfCare>()
                       .Name("gridLevel_#=MasterPOSID#")
                       .ToolBar(tool =>
                       {
                           tool.Create().Text("NEW");
                       })
                       .Columns(columns =>
                       {
                           columns.Bound(o => o.MasterPosLocID).Hidden(true);
                           columns.Bound(o => o.MasterPOS_MasterPOSID).Hidden(true);
                           columns.ForeignKey(o => o.Lev_of_Care_LevOfCareID, (IEnumerable<VMLevelOfCare>) ViewData["LevOfCare"], "LevOfCareID", "LevOfCareName").Width(110);

                           columns.Command(command =>
                           {
                               command.Edit();
                           }).Title("ACTIONS").Width(110);
                       })
                       .DataSource(dataSource => dataSource
                           .Ajax()
                           .PageSize(5)
                           .Model(model =>
                           {
                               model.Id(x => x.MasterPosLocID);
                               model.Field(x => x.MasterPosLocID).Editable(false);
                               model.Field(x => x.MasterPOS_MasterPOSID).Editable(false);
                           })
                           .Events(events => events.Error("Lev_errorHandler"))
                           .Read(read => read.Action("Read_LevOfCareOfThisPos", "MasterPOS_LevOfCare", new {locPOSID = "#=MasterPOSID#"}))
                           .Update(update => update.Action("Update_POS_LOfCare", "MasterPOS_LevOfCare"))
                           /*The fact that I was using 'LocationsPOS_Facitity_DBs_IDPK' as my route variable and it was the problem. It was trying to use the 'LocationsPOS_Facitity_DBs_IDPK' of the new row,
                               * which of course was 0. * Changing the name of the route variable to 'ParentID' fixed the problem.*/
                           .Create(create => create.Action("Create_POS_LOfCare", "MasterPOS_LevOfCare", new {ParentID = "#=MasterPOSID#"}))
                       )
                       .Pageable(ps => ps.Refresh(true)
                           .PreviousNext(true).PageSizes(true))
                       .Sortable()
                       .ToClientTemplate())                                     
            </text>); //End of Level of Care Tab

              tabs.Add().Text("SERVICES").Content(@<text>
                @(Html.Kendo().Grid<VMMasterPOS_MPServ>()
                      .Name("gridService_#=MasterPOSID#")
                      .ToolBar(tool =>
                      {
                          tool.Create().Text("NEW");
                      })
                      .Columns(columns =>
                      {
                          columns.Bound(o => o.MasterPosMPServID).Hidden(true);
                          columns.Bound(o => o.MasterPOS_MasterPOSID).Hidden(true);
                          columns.ForeignKey(o => o.MPServices_MPServID, (IEnumerable<VMMPService>) ViewData["Service"], "MPServID", "ServName").Width(110);

                          columns.Command(command =>
                          {
                              command.Edit();
                          }).Title("ACTIONS").Width(110);
                      })
                      .DataSource(dataSource => dataSource
                          .Ajax()
                          .PageSize(5)
                          .Model(model =>
                          {
                              model.Id(x => x.MasterPosMPServID);
                              model.Field(x => x.MasterPosMPServID).Editable(false);
                              model.Field(x => x.MasterPOS_MasterPOSID).Editable(false);
                          })
                          .Events(events => events.Error("ServError_handler"))
                          .Read(read => read.Action("Read_ServicesOfThisPOS", "MasterPOS_MPServ", new {masterPOSID = "#=MasterPOSID#"}))
                          .Update(update => update.Action("Update_POSService", "MasterPOS_MPServ"))
                          .Create(create => create.Action("Create_POSService", "MasterPOS_MPServ", new {ParentID = "#=MasterPOSID#"}))
                      )
                      .Pageable(ps => ps.Refresh(true)
                          .PreviousNext(true).PageSizes(true))
                      .Sortable()
                      .ToClientTemplate())                                    
            </text>); //End of Services Tab

              tabs.Add().Text("FAC INFO");

              tabs.Add().Text("PHYSICIAN GROUP");

              tabs.Add().Text("OWNERS").Content(@<text>
                 @(Html.Kendo().Grid<VMContact>()
                       .Name("Owners_#=MasterPOSID#")
                       .Columns(col =>
                       {
                           col.Bound(o => o.ContactID).Hidden(true);

                           col.Bound(x => x.LName).Width(110);

                           col.Bound(x => x.FName).Width(110);

                           col.Bound(x => x.PhoneNumber).Width(110);

                           col.Bound(x => x.Email).Width(110);

                           col.Bound(x => x.active).Width(110);
                       })
                       .DataSource(source => source.Ajax()
                           .ServerOperation(true)
                           .PageSize(5)
                           .Read(read => read.Action("Read_OwnersOfThisPos", "MasterPOS", new {masterPOSID = "#=MasterPOSID#", area = "Credentials"}))
                       )
                       .Sortable()
                       .Filterable()
                       .Pageable(ps => ps.Refresh(true)
                           .PreviousNext(true).PageSizes(true))
                       .ToClientTemplate()
                       )                                 
                                               </text>);

              tabs.Add().Text("CONTACTS").Content(@<text>
                  @(Html.Kendo().Grid<VMPosContact>()
                        .Name("PosContactGrid_#=MasterPOSID#")
                        .ToolBar(tool =>
                        {
                            tool.Create().Text("NEW");
                            //tool.Custom().Name("CHOOSE").HtmlAttributes(new { id = "choose", onclick = "customCommand()" });
                            tool.Custom().Name("CHOOSE").Action("Create", "MasterPOS_Contact", new {masterPOSID = "#=MasterPOSID#"});
                        })
                        .Columns(column =>
                        {
                            column.Bound(x => x.ContactID).Hidden(true);

                            column.Bound(x => x.LName).Width(110);

                            column.Bound(x => x.FName).Width(110);

                            column.Bound(x => x.PhoneNumber).Width(110);

                            column.Bound(x => x.Email).Width(110);

                            column.Bound(x => x.active).Width(110);

                            column.Command(cmd =>
                            {
                                cmd.Edit();
                            }).Title("ACTIONS").Width(110);
                        })
                        .Editable(editable =>
                        {
                            editable.TemplateName("PosCntViewModelEditor");
                            editable.Mode(GridEditMode.PopUp);
                        })
                        .DataSource(datasource => datasource
                            .Ajax()
                            .ServerOperation(true)
                            .PageSize(10)
                            .Model(model =>
                            {
                                model.Id(x => x.ContactID);
                                model.Field(x => x.ContactID).Editable(false);
                                model.Field(e => e.ContactTypes).DefaultValue(new List<VMContactType>());
                            })
                            .Events(ev => ev.Error("POSContact_ErrorHandler"))
                            .Read(read => read.Action("Read_POSContacts", "Contacts", new {masterPOSID = "#=MasterPOSID#"}))
                            .Create(create => create.Action("Create_MasterPOSContact", "Contacts", new {posName = "#=MasterPOSID#"}))
                            .Update(update => update.Action("Update_Contact", "Contacts"))
                        )
                        .Sortable()
                        .Filterable()
                        .Groupable()
                        .Pageable(ps => ps.Refresh(true)
                            .PreviousNext(true).PageSizes(true))
                        .ToClientTemplate()
                        )
                 
                                   
            </text>);

              tabs.Add().Text("ATTACHMENTS").LoadContentFrom("Index", "POSFiles", new { locationPOSID = "#=MasterPOSID#" });

              tabs.Add().Text("FORMS_SENT").Content(@<text>
                @(Html.Kendo().Grid<VMForms_Sent>()
                      .Name("FormsGrid_#=MasterPOSID#")
                      .ToolBar(tool => tool.Create().Text("NEW"))
                      .Columns(col =>
                      {
                          col.Bound(x => x.FormSentID).Hidden(true);

                          col.Bound(x => x.MasterPOS_MasterPOSID).Hidden(true).Width(110);

                          col.ForeignKey(x => x.FormsDict_FormsID, (IEnumerable<VMFormsDict>) ViewData["Forms"], "FormsID", "FormName").Width(110);

                          col.Command(cmd =>
                          {
                              cmd.Edit();
                          }).Title("ACTIONS").Width(110);
                      })
                      .DataSource(source => source
                          .Ajax()
                          .ServerOperation(true)
                          .PageSize(5)
                          .Model(model =>
                          {
                              model.Id(x => x.FormSentID);
                              model.Field(x => x.FormSentID).Editable(false);
                              model.Field(x => x.MasterPOS_MasterPOSID).Editable(false);
                          })
                          .Events(e => e.Error("formsSent_ErrorHandler"))
                          .Read(read => read.Action("Read_FormsOfThisPOS", "Forms_Sent", new {masterPOSID = "#=MasterPOSID#"}))
                          .Create(create => create.Action("Create_FormsSent", "Forms_Sent", new {posName = "#=MasterPOSID#"}))
                          .Update(update => update.Action("Update_FormsSent", "Forms_Sent", new {MasterPOS_MasterPOSID = "#=MasterPOSID#"}))
                      )
                      .Pageable(ps => ps.Refresh(true)
                          .PreviousNext(true).PageSizes(true))
                      .Sortable()
                      .ToClientTemplate()
                      )                                      
             </text>);

              tabs.Add().Text("POS IDs").Content(@<text>
                 @(Html.Kendo().Grid<VMPosIds>()
                       .Name("posId_#=MasterPOSID#")
                       .Columns(col =>
                       {
                           col.Bound(x => x.ZoomDBPOSID).Hidden(true);

                           col.Bound(x => x.MasterPOSID).Hidden(true);

                           col.Bound(x => x.Extra).Width(110);

                           col.Bound(x => x.ZoomPos_ID).Width(110);

                           col.Bound(x => x.Active).Width(110);
                       })
                       .DataSource(source => source
                           .Ajax()
                           .ServerOperation(true)
                           .PageSize(5)
                           .Read(read => read.Action("Read_PosIds", "ZoomDB_POSID_grp", new {masterPOSID = "#=MasterPOSID#"}))
                       )
                       .Pageable(ps => ps.Refresh(true)
                           .PreviousNext(true).PageSizes(true))
                       .Sortable()
                       .Filterable()
                       .ToClientTemplate()    
                       )                                  
         </text>);

          })
          .ToClientTemplate()
          )
    
  @helper RenderContactGrid()
  {
      @(Html.Kendo().TabStrip()
            .Name("posNameContact_#=MasterPOSID#")
            .SelectedIndex(0)
            .Animation(animation => animation.Open(open => open.Fade(FadeDirection.In)))
            .Items(elem =>
            {
                elem.Add().Text("ADD").Content(@<text>
                 @(Html.Kendo().Grid<VMPosContact>()
                       .Name("PosContactGrid_#=MasterPOSID#")
                       .ToolBar(tool =>
                       {
                           tool.Create().Text("NEW");
                           //tool.Custom().Name("CHOOSE").HtmlAttributes(new {id = "choose"} );

                       })
                       .Columns(column =>
                       {
                           column.Bound(x => x.ContactID).Hidden(true);

                           column.Bound(x => x.LName).Width(110);

                           column.Bound(x => x.FName).Width(110);

                           column.Bound(x => x.PhoneNumber).Width(110);

                           column.Bound(x => x.Email).Width(110);

                           column.Bound(x => x.active).Width(110);

                           //column.Bound(e => e.ContactTypes).ClientTemplate("#=contactTypeTemplate(ContactTypes)#").Width(110).Filterable(false).Sortable(false);
                           //column.Bound(e => e.ContactTypes).Width(110);

                           column.Command(cmd =>
                           {
                               cmd.Edit();
                           }).Title("ACTIONS").Width(110);
                       })
                       .Editable(editable =>
                       {
                           editable.TemplateName("PosCntViewModelEditor");
                           editable.Mode(GridEditMode.PopUp);
                       })
                       .DataSource(datasource => datasource
                           .Ajax()
                           .ServerOperation(true)
                           .PageSize(10)
                           .Model(model =>
                           {
                               model.Id(x => x.ContactID);
                               model.Field(x => x.ContactID).Editable(false);
                               model.Field(e => e.ContactTypes).DefaultValue(new List<VMContactType>());
                           })
                           .Events(ev => ev.Error("POSContact_ErrorHandler"))
                           .Read(read => read.Action("Read_POSContacts", "Contacts", new {masterPOSID = "#=MasterPOSID#"}))
                           .Create(create => create.Action("Create_MasterPOSContact", "Contacts", new {posName = "#=MasterPOSID#"}))
                           .Update(update => update.Action("Update_Contact", "Contacts"))
                       )
                       .Sortable()
                       .Filterable()
                       .Groupable()
                       .Pageable(ps => ps.Refresh(true)
                           .PreviousNext(true).PageSizes(true))
                       .ToClientTemplate()
                       )                           
             </text>);

                elem.Add().Text("CHOOSE");
            })
            .ToClientTemplate()
            )

  }  
    
    @*@(Html.Kendo().Window()
       .Name("window")
       .Width(630)
       .Height(315)
       .Position(p => p.Top(10).Left(500))
       .Actions(actions => actions.Refresh().Minimize().Maximize().Close())
       .AutoFocus(true)
       .Visible(true)
       .Title("CHOOSE CONTACTS")
       .Draggable()
       .Resizable()
       //.Content("Loading....")
       .LoadContentFrom("Create", "MasterPOS_Contact", new { masterPOSID = 4 })
       .ToClientTemplate()
    )*@

</script>



<script src="~/Scripts/jquery.signalR-2.1.2.min.js"></script>
    <script src="~/signalr/hubs"></script>
    <script src="~/Scripts/kendo/jszip.min.js"></script>
    <script src="~/Scripts/lib/Notify/notify.min.js"></script>

    <script>
        function onChange() {
            $("#PosIDs").data('kendoMultiSelect').dataSource.read();
        }

        $(function notifyDuplications() {
            var connection = $.hubConnection();
            var hub = connection.createHubProxy("MasterPOS");
            hub.on("notifyIfDuplicatePosIDs", function(notificacion) {
                $.notify(notificacion);
            });
            connection.start(function() {
                hub.invoke("doIfDuplicatePosIds");
            });
        });

        function posName_errorHandler(e) {
            if (e.errors) {
                var message = "Errors:\n";
                $.each(e.errors, function(key, value) {
                    if ('errors' in value) {
                        $.each(value.errors, function() {
                            message += this + "\n";
                        });
                    }
                });
                alert(message);
                var grid = $("#AllPOS").data("kendoGrid");
                grid.cancelChanges();
            }
        }

        function Lev_errorHandler(e) {
            if (e.errors) {
                var message = "Errors:\n";
                $.each(e.errors, function (key, value) {
                    if ('errors' in value) {
                        $.each(value.errors, function () {
                            message += this + "\n";
                        });
                    }
                });
                alert(message);
                var grid = jQuery("[id^='gridLevel_']").data("kendoGrid");
                grid.cancelChanges();
            }
        }

        function ServError_handler(e) {
            if (e.errors) {
                var message = "Errors:\n";
                $.each(e.errors, function (key, value) {
                    if ('errors' in value) {
                        $.each(value.errors, function () {
                            message += this + "\n";
                        });
                    }
                });
                alert(message);
                var grid = jQuery("[id^='gridService_']").data("kendoGrid");
                grid.cancelChanges();
            }
        }

        function formsSent_ErrorHandler(e) {
            if (e.errors) {
                var message = "Errors:\n";
                $.each(e.errors, function (key, value) {
                    if ('errors' in value) {
                        $.each(value.errors, function () {
                            message += this + "\n";
                        });
                    }
                });
                alert(message);
                var grid = jQuery("[id^='PosContactGrid_']").data("kendoGrid");
                grid.cancelChanges();
            }
        }

        function POSContact_ErrorHandler(e) {
            if (e.errors) {
                var message = "Errors:\n";
                $.each(e.errors, function (key, value) {
                    if ('errors' in value) {
                        $.each(value.errors, function () {
                            message += this + "\n";
                        });
                    }
                });
                alert(message);
                var grid = jQuery("[id^='FormsGrid_']").data("kendoGrid");
                grid.cancelChanges();
            }
        }

        /*Como se esta actualizando un objeto LocationPOS*/
        function onChangeInside(e) {
            if (e.action == "itemchange") { //primero me cersioro de que sea mientras se esta haciendo un update
                if (e.field == "FvPList_FvPID") { //especificamente cuando se esta modificando el tipo de POS: "FAC" or "PHY"
                    var model = e.items[0]; //Obtengo el row completo del objeto que se esta actualizando
                    var type = model.get("FvPList_FvPID"); //obtengo el PK del nuevo tipo seleccionado, en este caso FAC es 1 y PHY es 2
                    var pk = model.get("MasterPOSID"); //obtengo el valor del primary key del correspondiente LocationPOS object
                   
                    if (type == 2) { //Si el tipo de POS es PHY entonces muestro el tab 2: "Physician Group"
                        $($("#tabStrip_" + pk).data("kendoTabStrip").items()[6]).attr("style", "display:true");
                        $($("#tabStrip_" + pk).data("kendoTabStrip").items()[5]).attr("style", "display:none");
                    } else {
                        $($("#tabStrip_" + pk).data("kendoTabStrip").items()[6]).attr("style", "display:none");
                        $($("#tabStrip_" + pk).data("kendoTabStrip").items()[5]).attr("style", "display:true");
                    }
                }
            }
        }

        function detailExpand(e) {
            var rowPK = e.sender.dataItem(e.masterRow).MasterPOSID; //Obtengo el row completo del objeto que se esta actualizando
            var type = e.sender.dataItem(e.masterRow).FvPList_FvPID; //obtengo el PK del nuevo tipo seleccionado, en este caso FAC es 1 y PHY es 2
            if (type == 1) {
                //alert("FAC");
                $($("#tabStrip_" + rowPK).data("kendoTabStrip").items()[6]).attr("style", "display:none");
                $($("#tabStrip_" + rowPK).data("kendoTabStrip").items()[5]).attr("style", "display:true");
            } else {
                //alert("PHY");
                $($("#tabStrip_" + rowPK).data("kendoTabStrip").items()[6]).attr("style", "display:true");
                $($("#tabStrip_" + rowPK).data("kendoTabStrip").items()[5]).attr("style", "display:none");
            }
        }

        function customCommand(e) {
            alert("harnier");
            e.preventDefault();
            $("#window").data("kendoWindow").open();
        }
       
       
    </script>

