
@*@using Kendo.Mvc.UI
@model IEnumerable<MDM.WebPortal.Models.FromDB.ContactType>
    

<div class="container-fluid">
    @(Html.Kendo().Grid<MDM.WebPortal.Areas.PlaceOfServices.Models.ViewModels.VMContactType>()
  .Name("TipoContactoI")
  .ToolBar(tool =>
  {
      tool.Create().Text("NEW TYPE");
      tool.Excel();
  })
  .Excel(e =>
  {
      e.AllPages(true);
      e.FileName("ExportType");
  })
  .Columns(column =>
  {
      column.Bound(x => x.ContactTypeID).Hidden(true);

      column.Bound(x => x.ContactType_Name).Width(110);

      column.Command(command =>
      {
          command.Edit();
      }).Width(110).Title("ACTIONS");
  })

  .DataSource(datasource => datasource
     .Ajax()
     .ServerOperation(true)
     .PageSize(10)
     .Model(model =>
     {
         model.Id(service => service.ContactTypeID);
         model.Field(service => service.ContactTypeID).Editable(false);
     })
     .Events(events => events.Error("error_handler"))
     .Create(create => create.Action("Create_ContactType", "ContactTypes"))
     .Read(read => read.Action("Read_ContactType", "ContactTypes"))
     .Update(update => update.Action("Update_ContactType", "ContactTypes"))
  )

  .Filterable()
  .Groupable()
  .Sortable()
  .Pageable(ps => ps.Refresh(true)
      .PreviousNext(true).PageSizes(true))
    )
</div>

<script src="~/Scripts/kendo/jszip.min.js"></script>
<script>
    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            // Display the message
            alert(message);
            // Cancel the changes
            var grid = $("#TipoContactoI").data("kendoGrid");
            grid.cancelChanges();
        }
    }
</script>*@