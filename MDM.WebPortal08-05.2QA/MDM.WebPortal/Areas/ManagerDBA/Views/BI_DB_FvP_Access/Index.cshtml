@using System.Collections.Generic
@using Kendo.Mvc.UI
@model IEnumerable<MDM.WebPortal.Models.FromDB.BI_DB_FvP_Access>

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout1.cshtml";
}


<header class="main-header">
    <div class="container">
        <h1 class="page-title"></h1>
        <ol class="breadcrumb pull-right">
            <li><a href="@Url.Action("Index", "Home", new {area = ""})"><i class="fa fa-home"></i> Home</a></li>
            <li class="active">BI_DB_FvP_Access</li>
        </ol>
    </div>
</header>

<div class="container-fluid">
    @(Html.Kendo().Grid<MDM.WebPortal.Areas.ManagerDBA.Models.ViewModels.VMManager_Master>()
          .Name("Manager")
          .ToolBar(tools =>
          {
              tools.Excel();
              tools.Create().Text("NEW MANAGER");
          })
          .Excel(e =>
          {
              e.AllPages(true);
          })
          .Columns(columns =>
          {
              //By Default
              columns.Bound(x => x.ManagerID).Hidden(true);

              columns.Bound(x => x.AliasName).Width(110);

              //columns.Bound(x => x.Classification).Filterable(false).Sortable(false).Groupable(false).Width(110);

              columns.ForeignKey(x => x.ManagerTypeID, (System.Collections.IEnumerable)ViewData["Type"], "ManagerTypeID", "Name").Title("CLASSIFICATION").Width(110);
              
              columns.Bound(x => x.Active).Width(110);

              columns.Command(command =>
              {
                  command.Edit();
              }).Title("COMMANDS").Width(110);
             
          })

          .DataSource(dataSource => dataSource
              .Ajax()
              .PageSize(10)
              .Model(model =>
                {
                  model.Id(x => x.ManagerID);
                  model.Field(x => x.ManagerID).Editable(false);
                })
              .Events(events => events.Error("error_handler"))
              .Read(read => read.Action("Read_Manager", "Manager_Master"))
              .Update(update => update.Action("Update_Manager", "Manager_Master"))
              .Create(create => create.Action("Create_Manager", "Manager_Master"))
          )
          .Events(events => events.DataBound("dataBound"))

          .Sortable()
          .Filterable()
          .Pageable(ps => ps.Refresh(true)
              .PreviousNext(true).PageSizes(true))
          .Groupable()
          .ClientDetailTemplateId("template")
          .Events(e => e.ExcelExport("bidbfvp_excelExport").DetailInit("bidbfvp_detailInit")) //added
          .Reorderable(r => r.Columns(true))
          .Resizable(r => r.Columns(true))
          .Selectable(s => s.Enabled(true)
              .Type(GridSelectionType.Cell)
              .Mode(GridSelectionMode.Multiple))
          )
</div>
<script src="~/Scripts/kendo/jszip.min.js"></script>

<script id="template" type="text/kendo-tmpl">
    @(Html.Kendo().Grid<MDM.WebPortal.Areas.ManagerDBA.Models.ViewModels.VMBI_DB_FvP>()
          .Name("BIDB_#=ManagerID#")
          .ToolBar(tools => { tools.Create(); })
          .Columns(columns =>
          {
              columns.Bound(x => x.BIDbFvPID).Hidden(true);

              //columns.Bound(x => x.ManagerID).Title("CURRENT MANAGER").Width(70);
              //columns.Bound(x => x.ManagerID).Title("CURRENT MANAGER").Width(70).EditorTemplateName("Manager");

              columns.ForeignKey(o => o.FvPID, (System.Collections.IEnumerable) ViewData["FvP"], "FvPID", "FvPName").Title("FvP").Width(110);

              //Adding EditorTemplateName() clausule  the approach is autocomplete without it the approach is DropDownList
              //columns.ForeignKey(o => o.DB_ID, (System.Collections.IEnumerable)ViewData["DB"], "DB_ID", "DB").Title("DB").Width(110).EditorTemplateName("tempDBS");

              columns.ForeignKey(o => o.DB_ID, (System.Collections.IEnumerable) ViewData["DB"], "DB_ID", "DB").Title("DB").Width(110);
              
              columns.Bound(x => x.Active).Width(110);

              columns.Command(commands =>
              {
                  commands.Edit();
              }).Title("COMMANDS").Width(110);
          })

          .DataSource(dataSource => dataSource
              .Ajax()
              .PageSize(10)
              .Model(model =>
              {
                  model.Id(x => x.BIDbFvPID);
                  model.Field(x => x.BIDbFvPID).Editable(false);
              })
              .Events(events => events.Error("error_handler"))
              .Read(read => read.Action("Read_BI_DB_FvPByManager", "BI_DB_FvP_Access", new {ManagerID = "#=ManagerID#"}))
              .Update(update => update.Action("Update_BI_DB_FvP", "BI_DB_FvP_Access", new { ManagerID = "#=ManagerID#" }))
              /*The fact that I was using 'ManagerID' as my route variable was the problem. It was trying to use the 'ManagerID' of the new row, which of course was 0.
               * Changing the name of the route variable to 'ParentID' fixed the problem.*/
               .Create(create => create.Action("Create_BI_DB_FvP", "BI_DB_FvP_Access", new { ParentID = "#=ManagerID#" }))
          )
          .Pageable()
          .Sortable()
          //.Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("Manager"))
          .ToClientTemplate() 
          )
</script>

<script>
    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            // Display the message
            alert(message);
            // Cancel the changes
            var grid = $("#Manager").data("kendoGrid");
            grid.cancelChanges();
        }
    }

    function dataBound() {
        detailExportPromises = []; //added
        this.expandRow(this.tbody.find("tr.k-master-row").first());
    }

    var detailExportPromises = [];

    function bidbfvp_detailInit(e) {
        var deferred = $.Deferred();

        // get the index of the master row
        var masterRowIndex = e.masterRow.index(".k-master-row");

        // add the deferred to the list of promises
        detailExportPromises.push(deferred);

        var detailGrid = e.detailRow.find("[data-role=grid]").data("kendoGrid");

        detailGrid.bind("excelExport", function (e) {
            // prevent saving the file
            e.preventDefault();

            // resolve the deferred
            deferred.resolve({
                masterRowIndex: masterRowIndex,
                sheet: e.workbook.sheets[0]
            });
        });
    }

    function bidbfvp_excelExport(e) {
        // prevent saving the file because we will update the workbook
        e.preventDefault();

        var workbook = e.workbook;

        // Export all detail grids
        $("[data-role=grid]", this.element).each(function () {
            $(this).data("kendoGrid").saveAsExcel();
        });

        // wait for all detail grids to finish exporting
        $.when.apply(null, detailExportPromises)
            .then(function () {
                // get the export results
                var detailExports = $.makeArray(arguments);

                // sort by masterRowIndex
                detailExports.sort(function (a, b) {
                    return a.masterRowIndex - b.masterRowIndex;
                });

                // add an empty column
                workbook.sheets[0].columns.unshift({ width: 30 });

                // prepend an empty cell to each row
                for (var i = 0; i < workbook.sheets[0].rows.length; i++) {
                    workbook.sheets[0].rows[i].cells.unshift({});
                }

                // merge the detail export sheet rows with the master sheet rows
                // loop backwards so the masterRowIndex doesn't need to be updated
                for (var i = detailExports.length - 1; i >= 0; i--) {
                    var masterRowIndex = detailExports[i].masterRowIndex + 1;

                    var sheet = detailExports[i].sheet;

                    // prepend an empty cell to each row
                    for (var ci = 0; ci < sheet.rows.length; ci++) {
                        if (sheet.rows[ci].cells[0].value) {
                            sheet.rows[ci].cells.unshift({});
                        }
                    }

                    // insert the detail sheet rows after the master row
                    [].splice.apply(workbook.sheets[0].rows, [masterRowIndex + 1, 0].concat(sheet.rows));
                }

                // save the workbook
                kendo.saveAs({
                    dataURI: new kendo.ooxml.Workbook(workbook).toDataURL(),
                    fileName: "ExportBIAcces.xlsx"
                });
            });
    }
</script>