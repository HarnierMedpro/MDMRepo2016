@using Kendo.Mvc.UI
@using MDM.WebPortal.Areas.Credentials.Models.ViewModel
@model IEnumerable<MDM.WebPortal.Models.FromDB.CorporateMasterList>

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout1.cshtml";
}

<header class="main-header">
    <div class="container">
        <h1 class="page-title"></h1>
        <ol class="breadcrumb pull-right">
            <li><a href="@Url.Action("Index", "Home", new {area = ""})"><i class="fa fa-home"></i> Home</a></li>
            <li class="active">Corporate</li>
        </ol>
    </div>
</header>

@if (TempData["Error"] != null )
{
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-6">
                <div class="alert alert-danger">
                    <a href="#" class="close" data-dismiss="alert" aria-label="Close">&times;</a>
                    <p>@TempData["Error"]</p>
                </div>
            </div>
        </div>
    </div>
}
<!--------------------------------------------CORPORATION MAIN GRID--------------------------------------------->
<div class="container-fluid">
    @(Html.Kendo().Grid<VMCorporateMasterList>()
          .Name("gridCorporate")
          .ToolBar(tool =>
          {
              tool.Create().Text("NEW CORPORATION");
              tool.Excel().Text("EXPORT");
          })
          .Excel(e => e.AllPages(true))

          .Columns(columns =>
          {
              columns.Bound(c => c.CorporateName).Width(110);

              columns.Bound(c => c.TaxID).Width(110);

              columns.Bound(c => c.active).Width(110);

              columns.Command(commands => commands.Edit()).Title("COMMANDS").Width(200);
          })
          .Editable(editable =>
          {
              editable.TemplateName("CorporationViewModelEditor");
              editable.Mode(GridEditMode.PopUp);
          })
          //.Events(ev => ev.ExcelExport("exportCorporations"))
          .Filterable()
          .Pageable(ps => ps.Refresh(true)
              .PreviousNext(true).PageSizes(true))
          .Sortable()
          .Groupable()
          .ClientDetailTemplateId("template")
          .Reorderable(r => r.Columns(true))
          .Resizable(r => r.Columns(true))
          .DataSource(dataSource => dataSource
              .Ajax()
              .ServerOperation(true)
              .PageSize(10)
              .Model(model =>
              {
                  model.Id(x => x.corpID);
                  model.Field(x => x.corpID).Editable(false);
              })
              .Events(events => events.Error("error_handler"))
              .Read(read => read.Action("Read_Corporation", "CorporateMasterLists"))
              .Update(update => update.Action("Update_Corporation", "CorporateMasterLists"))
              .Create(create => create.Action("Create_Corporation", "CorporateMasterLists"))
          )
          )
</div>
<!--------------------------------------------CORPORATION MAIN GRID--------------------------------------------->


<!-----------------------------------------CORPORATION DETAILS TEMPLATE----------------------------------------->
<script id="template" type="text/kendo-tmpl">
@(Html.Kendo().TabStrip()
          .Name("tabStrip_#=corpID#")
          .SelectedIndex(0)
          .Animation(animation => animation.Open(open => open.Fade(FadeDirection.In)))
          .Events(ev =>
          {
              ev.Select("onSelectTabCorp");
          })
          .Items(items =>
          {
              /*----------------------CORP-DBS DETAILS TAB----------------------*/
              items.Add().Text("DATABASE").Content(@<text>
                @(Html.Kendo().Grid<VMCorp_DB>()
                      .Name("gridCorpDB_#=corpID#")
                      .ToolBar(tools =>
                      {
                          tools.Create().Text("ASSIGN NEW DB");
                          tools.Excel().Text("EXPORT");
                      })
                      .Excel(ex =>
                      {
                          ex.AllPages(true);
                          ex.FileName("Databases");
                      })
                      .Columns(columns =>
                      {
                          columns.Bound(o => o.ID_PK).Hidden(true);
                          columns.ForeignKey(p => p.DB_ID, (System.Collections.IEnumerable)ViewData["DBs"], "DB_ID", "DB").Title("DB").Width(110);
                          columns.Bound(o => o.databaseName).Title("NAME");
                          columns.Bound(o => o.active).Width(300).Title("ACTIVE");

                          columns.Command(commands =>
                          {
                              commands.Edit();
                              commands.Destroy().Text("Release");
                          }).Title("COMMANDS");
                      })
                      .DataSource(dataSource => dataSource
                          .Ajax()
                          .PageSize(5)
                          .Events(events => events.Error("error_CorpDBHandler"))
                          .Model(model =>
                          {
                              model.Id(x => x.ID_PK);
                              model.Field(x => x.ID_PK).Editable(false);
                              model.Field(x => x.databaseName).Editable(false);
                              model.Field(x => x.active).Editable(false);
                          })
                          .Read(read => read.Action("HierarchyBinding_DBs", "Corp_DBs", new { corpID = "#=corpID#", area = "Credentials" }))
                          .Update(x => x.Action("Update_CorpDbs", "Corp_DBs", new { corpID = "#=corpID#", area = "Credentials" }))
                          .Destroy(destroy => destroy.Action("Corp_DBs_Release", "Corp_DBs", new { corpID = "#=corpID#", area = "Credentials" }))
                          .Create(create => create.Action("Create_CorpDbs", "Corp_DBs", new { ParentID = "#=corpID#", area = "Credentials" }))
                      )
                      .Pageable(ps => ps.Refresh(true)
                          .PreviousNext(true).PageSizes(true))
                      .Sortable()
                      .Filterable()
                      .ToClientTemplate()
                )
              </text>);
            /*----------------------CORP-DBS DETAILS TAB----------------------*/
           
            /*--------------------CORP-OWNER DETAILS TAB---------------------*/
            items.Add().Text("OWNERS").Content(@<text>
            @(Html.Kendo().Grid<VMContact>()
                          .Name("gridCorpOwner_#=corpID#")
                          .AutoBind(false)
                          .ToolBar(tool =>
                            {
                                tool.Create().Text("NEW OWNER");
                                tool.Custom().Text("CHOOSE").Url("javascript:customChooseOwners(#=corpID#)");
                                tool.Excel().Text("EXPORT");
                            })
                            .Excel(ex =>
                            {
                                ex.AllPages(true);
                                ex.FileName("Owners");
                            })
                          .Columns(columns =>
                          {
                              columns.Bound(o => o.ContactID).Hidden(true);
                              columns.Bound(o => o.LName).Width(110);
                              columns.Bound(o => o.FName).Width(110);
                              columns.Bound(o => o.PhoneNumber).Width(110);
                              columns.Bound(o => o.Email).Width(110);
                              columns.Bound(o => o.active).Width(110).Width(110);

                              columns.Command(cmd =>
                              {
                                  cmd.Edit();
                              }).Title("ACTIONS").Width(110);
                          })
                          .Editable(editable =>
                              {
                                  editable.TemplateName("CorpOwnerViewModelEditor");
                                  editable.Mode(GridEditMode.PopUp);
                              })
                          .DataSource(dataSource => dataSource
                              .Ajax()
                              .PageSize(5)
                              .ServerOperation(true)
                              .Model(model =>
                              {
                                  model.Id(x => x.ContactID);
                                  model.Field(x => x.ContactID).Editable(false);
                              })
                              .Events(events => events.Error("error_CorpOwnerHandler").RequestEnd("requestFinished"))
                              .Read(read => read.Action("Read_CorpOwners", "CorporateMasterLists", new { corpID = "#=corpID#" }))
                              .Update(x => x.Action("Update_CorpOwner", "Corp_Owner", new { corpID = "#=corpID#" }))
                              .Create(create => create.Action("Create_CorpOwner", "Corp_Owner", new { ParentID = "#=corpID#" }))
                          )

                          .Pageable(ps => ps.Refresh(true)
                              .PreviousNext(true).PageSizes(true))
                          .Sortable()
                          .Filterable()
                          .ToClientTemplate()
            )
            </text>);
            /*--------------------CORP-OWNER DETAILS TAB---------------------*/
            
            /*-----------------CORP-CONTACTS DETAILS TAB--------------------*/
            items.Add().Text("CONTACTS").Content(@<text>
            @(Html.Kendo().Grid<VMCorpContact>()
                      .Name("ContactGrid_#=corpID#")
                      .AutoBind(false)
                      .ToolBar(tool =>
                      {
                          tool.Create().Text("NEW");
                          tool.Custom().Text("CHOOSE").Url("javascript:customCommand(#=corpID#)");
                          tool.Excel().Text("EXPORT");
                      })
                      .Excel(ex =>
                      {
                          ex.AllPages(true);
                          ex.FileName("Contacts");
                      })
                      .Columns(column =>
                      {
                          column.Bound(x => x.ContactID).Hidden(true);

                          column.Bound(x => x.LName).Width(110);

                          column.Bound(x => x.FName).Width(110);

                          column.Bound(x => x.PhoneNumber).Width(110);

                          column.Bound(x => x.Email).Width(110);

                          column.Bound(x => x.active).Width(110);

                          column.Command(cmd =>
                          {
                              cmd.Edit();
                          }).Title("ACTIONS").Width(110);
                      })
                      .Editable(editable =>
                      {
                          editable.TemplateName("CorpCntViewModelEditor");
                          editable.Mode(GridEditMode.PopUp);
                      })
                      .DataSource(datasource => datasource
                          .Ajax()
                          .ServerOperation(true)
                          .PageSize(10)
                          .Model(model =>
                          {
                              model.Id(x => x.ContactID);
                              model.Field(x => x.ContactID).Editable(false);
                          })
                          .Events(ev => ev.Error("error_ContactHandler").RequestEnd("editCntRequest"))
                          .Read(read => read.Action("Read_CorpContacts", "CorporateMasterLists", new { corpID = "#=corpID#" }))
                          .Create(create => create.Action("Create_CorpContact", "Corp_Owner", new { ParentID = "#=corpID#" }))
                          .Update(update => update.Action("Update_Contact", "Contacts"))
                      )
                      .Sortable()
                      .Filterable()
                      .Groupable()
                      .Pageable(ps => ps.Refresh(true)
                          .PreviousNext(true).PageSizes(true))
                      .ToClientTemplate()
            )
            </text>);
            /*-----------------CORP-CONTACTS DETAILS TAB--------------------*/
            
            /*----------------------CORP-POS DETAILS TAB-------------------*/
            items.Add().Text("POS").Content(@<text>
                @(Html.Kendo().Grid<VMMasterPOSPartial>()
                          .Name("MasterPOSGrid_#=corpID#")
                          .AutoBind(false)
                          .ToolBar(tool => tool.Excel().Text("EXPORT"))
                          .Excel(ex =>
                          {
                              ex.AllPages(true);
                              ex.FileName("MasterPOS");
                          })
                          .Columns(column =>
                          {
                              column.Bound(p => p.MasterPOSID).Hidden();

                              column.Bound(p => p.PosMasterName).Width(110);

                              column.Bound(p => p.active).Width(110);

                              column.Command(cmd =>
                              {
                                  cmd.Edit();
                              }).Title("ACTIONS").Width(110);
                          })
                          .DataSource(datasource => datasource
                              .Ajax()
                              .ServerOperation(true)
                              .PageSize(5)
                              .Model(model =>
                              {
                                  model.Id(p => p.MasterPOSID);
                                  model.Field(p => p.MasterPOSID).Editable(false);
                              })
                              .Events(ev => ev.Error("masterPOS_errorHandler"))
                              .Read(read => read.Action("Read_MasterPOSOfThisCorp", "CorporateMasterLists", new { corpID = "#=corpID#" }))
                              .Update(update => update.Action("Update_POSFromCorp", "MasterPOS"))
                          )
                          .Filterable()
                          .Sortable()
                          .Pageable(ps => ps.Refresh(true)
                              .PreviousNext(true).PageSizes(true))
                          .ToClientTemplate()
                )
            </text>);
    
              items.Add().Text("FILES").LoadContentFrom("Corp_Files", "POSFiles", new {corpID = "#=corpID#"});
          })
            /*----------------------CORP-POS DETAILS TAB-------------------*/
.ToClientTemplate()
)

<div style="display:none">
    @(Html.Kendo().Window()
      .Name("wdwChoose_#=corpID#")
      .Width(630)
      .Height(315)
      .Actions(actions => actions.Minimize().Maximize().Close())
      .AutoFocus(true)
      .Visible(false)
      .Title("CHOOSE CONTACTS")
      .Draggable()
      .Resizable()
      .Content(@<text>
        @(Html.Kendo().MultiSelect()
              .Name("corpCnt_#=corpID#")
              .AutoBind(false)
              .DataTextField("Email")
              .DataValueField("ContactID")
              .Placeholder("Select contacts...")
              //.ItemTemplate("#:LName#, #:FName#  (#:Email#)")
              .DataSource(source =>
              {
                  source.Custom()
                      .ServerFiltering(true)
                      .ServerPaging(true)
                      .PageSize(80)
                      .Type("aspnetmvc-ajax")
                      .Transport(transport =>
                      {
                          transport.Read("Read_CorpContacts", "Contacts", new { corpID = "#=corpID#" });
                      })
                      .Schema(schema =>
                      {
                          schema.Data("Data")
                              .Total("Total");
                      });
              })
              .ToClientTemplate())

        <br />
        <div class="text-center">
            <a id="#=corpID#" class="btn btn-sm btn-default" href="\\#" onclick="return CheckRequired(this.id);"><span class="fa fa-cloud-upload"></span>Save</a>
        </div>
        <br />
    </text>)
    .ToClientTemplate()
)
</div>
    
<div style="display:none">
  @(Html.Kendo().Window()
      .Name("wChooseOwner_#=corpID#")
      .Width(630)
      .Height(315)
      .Actions(actions => actions.Minimize().Maximize().Close())
      .AutoFocus(true)
      .Visible(false)
      .Title("CHOOSE OWNER")
      .Draggable()
      .Resizable()
      .Content(@<text>
        @(Html.Kendo().MultiSelect()
              .AutoBind(false)
              .Name("corpOwn_#=corpID#")
              .DataTextField("Email")
              .DataValueField("ContactID")
              .Placeholder("Select owners...")
              //.ItemTemplate("#:LName#, #:FName#  (#:Email#)")
              .DataSource(source =>
              {
                  source.Custom()
                      .ServerFiltering(true)
                      .ServerPaging(true)
                      .PageSize(80)
                      .Type("aspnetmvc-ajax")
                      .Transport(transport =>
                      {
                          transport.Read("Read_Owners", "Contacts", new { corpID = "#=corpID#" });
                      })
                      .Schema(schema =>
                      {
                          schema.Data("Data")
                              .Total("Total");
                      });
              })
              .ToClientTemplate())

        <br />
        <div class="text-center">
            <a id="#=corpID#" class="btn btn-sm btn-default" href="\\#" onclick="return saveOwners(this.id);"><span class="fa fa-cloud-upload"></span>Save</a>
        </div>
        <br />
    </text>)
.ToClientTemplate()
        )
    </div>
    
<div style="display:none">
    @(Html.Kendo().Window()
        .Name("wUpCorpFile1_#=corpID#")
        .Width(660)
        .Height(600)
        .Actions(actions => actions.Minimize().Maximize().Close())
        .AutoFocus(true)
        .Visible(false)
        .Title("UPLOAD FILE")
        .Draggable()
        .Resizable()
        .LoadContentFrom("SaveCorpFiles", "POSFiles", new { corpID = "#=corpID#" })
        .ToClientTemplate()
    )   
</div>

</script>
<!-----------------------------------------CORPORATION DETAILS TEMPLATE----------------------------------------->

<!---------------------------------------------JAVASCRIPT ZONE-------------------------------------------------->
<script src="~/Scripts/jquery.signalR-2.1.2.min.js"></script>
<script src="~/signalr/hubs"></script>
<script src="~/Scripts/lib/Notify/notify.min.js"></script>

<script>
    /*Captura el evento que se dispara al seleccionar cada uno de los tabs del componente TabStrip que muestra los detalles de cada uno de los
  los objetos MasterPOS, de modo tal que se obtiene solo aquellos tabs que contienen Grids y se pide que se lea la fuente de cada uno de 
  ellos
 */
    function onSelectTabCorp(e) {
        console.log("Selected: " + $(e.item).find("> .k-link").text());
        console.log("Selected: " + $(e.contentElement).find("> .k-grid").attr('id'));
        var gridCId = $(e.contentElement).find("> .k-grid").attr('id');
        if (gridCId != undefined) {
            var grid = $("#" + gridCId).data("kendoGrid");
            grid.dataSource.read();
        }
    }
    
    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function(key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function() {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
            var grid = $("#gridCorporate").data("kendoGrid");
            grid.cancelChanges();
        }
    }

    function error_CorpOwnerHandler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function(key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function() {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
            var grid = jQuery("[id^='gridCorpOwner']").data("kendoGrid");
            grid.cancelChanges();
        }
    }

    function error_CorpDBHandler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function(key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function() {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
            var grid = jQuery("[id^='gridCorpDB']").data("kendoGrid");
            grid.cancelChanges();
        }
    }
    
    function error_ContactHandler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
            var grid = jQuery("[id^='ContactGrid_']").data("kendoGrid");
            grid.cancelChanges();
        }
    }

    function error_CorpContactHandler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
            var grid = jQuery("[id^='CorpContactGrid_']").data("kendoGrid");
            grid.cancelChanges();
        }
    }

    function masterPOS_errorHandler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
            var grid = jQuery("[id^='MasterPOSGrid_']").data("kendoGrid");
            grid.cancelChanges();
        }
    }
    
    $(function notifyDuplicatedDatabase() {
        var connection = $.hubConnection();
        var hub = connection.createHubProxy("CorporateMaster");
        hub.on("notifyIfDuplicated", function (notificacion) {
            $.notify(notificacion);
        });
        connection.start(function () {
            hub.invoke("doIfDBDuplicated");
        });
    });

    $(function notifyNewPos() {
        var connection = $.hubConnection();
        var hub = connection.createHubProxy("UpdatePOS");
        hub.on("notifyIfCreateNewPOS", function (r, i, n, a) {
            var grid = $("#MasterPOSGrid_"+r).data("kendoGrid");
            grid.dataSource.add({ MasterPOSID: i, PosMasterName: n, active: a });
        });
        connection.start(function () {
            hub.invoke("doIfCreateNewPos");
        });
    });

    //$(function() {
    //    var connection = $.hubConnection();
    //    var hub = connection.createHubProxy("UpdatePOS");
    //    hub.on("notifyIfUpdatePOS", function (r, i, n, a) {
    //        var grid = $("#MasterPOSGrid_" + r).data("kendoGrid");
    //        grid.dataSource.pushUpdate({ MasterPOSID: i, PosMasterName: n, active: a });
    //    });
    //    connection.start(function () {
    //        hub.invoke("doIfUpdatePos");
    //    });
    //});

    function customCommand(e) {
        $("#wdwChoose_"+e).data("kendoWindow").open().center();
    }

    function activeWdwCorpFile(e) {
        $("#wUpCorpFile1_" + e).data("kendoWindow").open().center();
    }

    function CheckRequired(d) {
        var multiselect = $("#corpCnt_"+d).data("kendoMultiSelect");
        var list = multiselect.dataItems();
        if (list.length === 0) {
            $("#corpCnt_"+d).notify("You have to select at least one Contact. Try again!",
                {
                    position: "bottom left",
                    className: 'error'
                }
            );
        } else {
            var domainName = "http://" + window.location.host.toString();
            var info = [];
            for (i = 0; i < list.length; i++) {
                info.push(list[i].ContactID);
            }
            $.ajax({
                type: "POST",
                url: domainName + '/Corp_Owner/Save_MultipleCorpContacts',
                data: {
                    corpID: d,
                    Contacts: info
                },
                success: function (data) {
                    $("#wdwChoose_"+d).data("kendoWindow").close();
                    var grid = $("#ContactGrid_"+d).data("kendoGrid");
                    grid.dataSource.read();
                    if (data.lenght === 0) {
                        alert('Something failed. Please try again!');
                    }
                },
                complete: function (xhr, success) { },
                error: function (xhr, ajaxOptions, thrwnError) {
                    alert('Something failed. Please try again!');
                }
            });
        }
    }

    function customChooseOwners(e) {
        $("#wChooseOwner_"+e).data("kendoWindow").open().center();
    }

    function saveOwners(d) {
        var multiselect = $("#corpOwn_"+d).data("kendoMultiSelect");
        var list = multiselect.dataItems();
        if (list.length === 0) {
            $("#corpOwn_"+d).notify("You have to select at least one Contact. Try again!",
                {
                    position: "bottom left",
                    className: 'error'
                }
            );
        } else {
            var domainName = "http://" + window.location.host.toString();
            var info = [];
            for (i = 0; i < list.length; i++) {
                info.push(list[i].ContactID);
            }
            $.ajax({
                type: "POST",
                url: domainName + '/Corp_Owner/Save_MultipleCorpOwners',
                data: {
                    corpID: d,
                    Contacts: info
                },
                success: function (data) {
                    $("#wChooseOwner_"+d).data("kendoWindow").close();
                    var grid = $("#gridCorpOwner_"+d).data("kendoGrid");
                    grid.dataSource.read();
                    if (data.lenght === 0) {
                        alert('Something failed. Please try again!');
                    }
                },
                complete: function (xhr, success) { },
                error: function (xhr, ajaxOptions, thrwnError) {
                    alert('Something failed. Please try again!');
                }
            });
        }
    }

    function requestFinished(e) {
        var type = e.type;
        if (type === "update") {
            var response = e.response.Data[0].active;
            if (response === false) {
                this.read();
            }
        }
    }

    function editCntRequest(e) {
        var type = e.type;
        if (type === "update") {
            var response = e.response.Data[0].active;
            if (response === false) {
                this.read();
            }
        }
    }

</script>
<!---------------------------------------------JAVASCRIPT ZONE-------------------------------------------------->
