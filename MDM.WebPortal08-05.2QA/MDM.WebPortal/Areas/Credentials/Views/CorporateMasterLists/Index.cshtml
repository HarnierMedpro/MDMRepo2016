@using Kendo.Mvc.UI
@using MDM.WebPortal.Areas.Credentials.Models.ViewModel
@model IEnumerable<MDM.WebPortal.Models.FromDB.CorporateMasterList>

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout1.cshtml";
}

<header class="main-header">
    <div class="container">
        <h1 class="page-title"></h1>
        <ol class="breadcrumb pull-right">
            <li><a href="@Url.Action("Index","Home", new {area=""})"><i class="fa fa-home"></i> Home</a></li>
            <li class="active">Corporate</li>
        </ol>
    </div>
</header>

<div class="container-fluid">
    @(Html.Kendo().Grid<VMCorporateMasterList>()
      .Name("gridCorporate")
      .ToolBar(tool =>
      {
          tool.Create().Text("NEW CORPORATION");
          tool.Excel();
      })
      .Excel(e => e.AllPages(true))

      .Columns(columns =>
      {
          columns.Bound(c => c.CorporateName).Width(110);

          columns.Bound(c => c.TaxID).Width(110);

          columns.Bound(c => c.W9).Width(110);

          columns.Bound(c => c.active).Width(110);

          columns.Command(commands => commands.Edit()).Title("COMMANDS").Width(200);
      })
      .Editable(editable => { editable.TemplateName("CorporationViewModelEditor");editable.Mode(GridEditMode.PopUp);})
      .Filterable()
      .Pageable(ps => ps.Refresh(true)
      .PreviousNext(true).PageSizes(true))
      .Sortable()
      .Groupable()
      .ClientDetailTemplateId("template")
      .Reorderable(r => r.Columns(true))
      .Resizable(r => r.Columns(true))
      .DataSource(dataSource => dataSource
          .Ajax()
          .ServerOperation(true)
          .PageSize(10)
          .Model(model =>
            {
                model.Id(x => x.corpID);
                model.Field(x => x.corpID).Editable(false);
            })
          .Events(events => events.Error("error_handler"))
          .Read(read => read.Action("Read_Corporation", "CorporateMasterLists"))
          .Update(update => update.Action("Update_Corporation", "CorporateMasterLists"))
          .Create(create => create.Action("Create_Corporation", "CorporateMasterLists"))
        )
    )
</div>

<script id="template" type="text/kendo-tmpl">
    @(Html.Kendo().TabStrip()
          .Name("tabStrip_#=corpID#")
          .SelectedIndex(0)
          .Animation(animation => animation.Open(open => open.Fade(FadeDirection.In)))
          .Items(items =>
          {
              items.Add().Text("DATABASE").Content(@<text>
                @(Html.Kendo().Grid<VMCorp_DB>()
                      .Name("gridCorpDB_#=corpID#")
                      .ToolBar(tools =>
                      {
                          tools.Create().Text("ASSIGN NEW DB");
                      })
                      .Columns(columns =>
                      {
                          columns.Bound(o => o.ID_PK).Hidden(true);
                          columns.ForeignKey(p => p.DB_ID, (System.Collections.IEnumerable) ViewData["DBs"], "DB_ID", "DB").Title("DB").Width(110);
                          columns.Bound(o => o.databaseName).Title("NAME");
                          columns.Bound(o => o.active).Width(300).Title("ACTIVE");

                          columns.Command(commands =>
                          {
                              commands.Edit();
                              commands.Destroy().Text("Release");
                          }).Title("COMMANDS");
                      })
                      .DataSource(dataSource => dataSource
                          .Ajax()
                          .PageSize(5)
                          .Events(events => events.Error("error_CorpDBHandler"))
                          .Model(model =>
                          {
                              model.Id(x => x.ID_PK);
                              model.Field(x => x.ID_PK).Editable(false);
                              model.Field(x => x.databaseName).Editable(false);
                              model.Field(x => x.active).Editable(false);
                          })
                          .Read(read => read.Action("HierarchyBinding_DBs", "Corp_DBs", new {corpID = "#=corpID#", area = "Credentials"}))
                          .Update(x => x.Action("Update_CorpDbs", "Corp_DBs", new {corpID = "#=corpID#", area = "Credentials"}))
                          .Destroy(destroy => destroy.Action("Corp_DBs_Release", "Corp_DBs", new {corpID = "#=corpID#", area = "Credentials"}))
                          .Create(create => create.Action("Create_CorpDbs", "Corp_DBs", new {ParentID = "#=corpID#", area = "Credentials"}))
                      )
                      .Pageable(ps => ps.Refresh(true)
                          .PreviousNext(true).PageSizes(true))
                      .Sortable()
                      .Filterable()
                      .ToClientTemplate()
                      )
            </text>);

              items.Add().Text("OWNERS").Content(@<text>
                    @(Html.Kendo().Grid<VMContact>()
                          .Name("gridCorpOwner_#=corpID#")
                          .ToolBar(tool => tool.Create().Text("NEW OWNER"))
                          .Columns(columns =>
                          {
                              columns.Bound(o => o.ContactID).Hidden(true);
                              columns.Bound(o => o.LName).Width(110);
                              columns.Bound(o => o.FName).Width(110);
                              columns.Bound(o => o.PhoneNumber).Width(110);
                              columns.Bound(o => o.Email).Width(110);
                              columns.Bound(o => o.active).Width(110).Width(110);

                              columns.Command(cmd =>
                              {
                                  cmd.Edit();
                              }).Title("ACTIONS").Width(110);
                          })
                          .DataSource(dataSource => dataSource
                              .Ajax()
                              .PageSize(5)
                              .ServerOperation(true)
                              .Model(model =>
                              {
                                  model.Id(x => x.ContactID);
                                  model.Field(x => x.ContactID).Editable(false);
                              })
                              .Events(events => events.Error("error_CorpOwnerHandler"))
                              .Read(read => read.Action("Read_CorpOwners", "CorporateMasterLists", new {corpID = "#=corpID#"}))
                              .Update(x => x.Action("Update_CorpOwner", "Corp_Owner", new {corpID = "#=corpID#"}))
                              .Create(create => create.Action("Create_CorpOwner", "Corp_Owner", new {ParentID = "#=corpID#"}))
                          )

                          .Pageable(ps => ps.Refresh(true)
                              .PreviousNext(true).PageSizes(true))
                          .Sortable()
                          .Filterable()
                          .ToClientTemplate()
                          )
                    </text>);

              items.Add().Text("CONTACTS").Content(@<text>
                    @RenderNewTab()
                @*@(Html.Kendo().Grid<VMCorpContact>()
                    .Name("ContactGrid_#=corpID#")
                    .ToolBar(tool =>
                        {
                            tool.Create().Text("NEW CONTACT");
                        })
                    .Columns(column =>
                        {
                            column.Bound(x => x.ContactID).Hidden(true);

                            column.Bound(x => x.LName).Width(110);

                            column.Bound(x => x.FName).Width(110);

                            column.Bound(x => x.PhoneNumber).Width(110);

                            column.Bound(x => x.Email).Width(110);

                            column.Bound(x => x.active).Width(110);

                            //column.Bound(e => e.ContactTypes).ClientTemplate("#=contactTypeTemplate(ContactTypes)#").Width(110).Filterable(false).Sortable(false);
                            //column.Bound(e => e.ContactTypes).Width(110);

                            column.Command(cmd =>
                               {
                                   cmd.Edit();
                               }).Title("ACTIONS").Width(110);
                        })
                      .Editable(editable => { editable.TemplateName("CorpCntViewModelEditor"); editable.Mode(GridEditMode.PopUp); })
                      .DataSource(datasource => datasource
                         .Ajax()
                         .ServerOperation(true)
                         .PageSize(10)
                         .Model(model =>
                            {
                                model.Id(x => x.ContactID);
                                model.Field(x => x.ContactID).Editable(false);
                                model.Field(e => e.ContactTypes).DefaultValue(new List<VMContactType>());
                            })
                          //.Events(ev => ev.Error("error_ContactHandler"))
                          .Read(read => read.Action("Read_CorpContacts", "CorporateMasterLists", new { corpID = "#=corpID#" }))
                          .Create(create => create.Action("Create_CorpContact", "Corp_Owner", new { ParentID = "#=corpID#" }))
                          .Update(update => update.Action("Update_Contact", "Contacts"))
                       )
                       .Sortable()
                       .Filterable()
                       .Groupable()
                       .Pageable(ps => ps.Refresh(true)
                          .PreviousNext(true).PageSizes(true))
                .ToClientTemplate()*@
      
    </text>);

              items.Add().Text("POS").Content(@<text>
                @(Html.Kendo().Grid<VMMasterPOS>()
                           .Name("MasterPOSGrid_#=corpID#")
                           .Columns(column =>
                           {
                               column.Bound(p => p.MasterPOSID).Hidden();

                               column.Bound(p => p.PosMasterName).Width(110);

                               column.Bound(p => p.active).Width(110);

                               column.Command(cmd =>
                               {
                                   cmd.Edit();
                               }).Title("ACTIONS").Width(110);
                           })
                           .DataSource(datasource => datasource
                             .Ajax()
                             .ServerOperation(true)
                             .PageSize(5)
                             .Model(model =>
                             {
                                 model.Id(p => p.MasterPOSID);
                                 model.Field(p => p.MasterPOSID).Editable(false);
                             })
                             .Read(read => read.Action("Read_MasterPOSOfThisCorp", "CorporateMasterLists", new { corpID = "#=corpID#" }))
                             .Update(update => update.Action("Update_Contact", "Contacts"))
                            )
                            .Filterable()
                            .Sortable()
                            .Pageable(ps => ps.Refresh(true)
                                  .PreviousNext(true).PageSizes(true))
                           .ToClientTemplate()
                )
            </text>);

          })
   .ToClientTemplate()
)
</script>
<script type="text/kendo" id="contactTypeTemplate">
    <ul>
        #for(var i = 0; i< data.length; i++){#
        <li>#:data[i].ContactType_Name#</li>
        #}#
    </ul>
</script>

<script type="text/javascript">
    var contactTypeTemplate = kendo.template($("#contactTypeTemplate").html(), { useWithBlock: false });
</script>

@helper RenderNewTab()
{
    @(Html.Kendo().TabStrip()
         .Name("corpContact_#=corpID#")
         .SelectedIndex(0)
         .Animation(animation => animation.Open(open => open.Fade(FadeDirection.In)))
         .Items(elem =>
         {
             elem.Add().Text("CONTACTS").Content(@<text>
                @(Html.Kendo().Grid<VMCorpContact>()
                    .Name("CorpContactGrid_#=corpID#")
                    .ToolBar(tool =>
                        {
                            tool.Create().Text("NEW CONTACT");
                        })
                    .Columns(column =>
                        {
                            column.Bound(x => x.ContactID).Hidden(true);

                            column.Bound(x => x.LName).Width(110);

                            column.Bound(x => x.FName).Width(110);

                            column.Bound(x => x.PhoneNumber).Width(110);

                            column.Bound(x => x.Email).Width(110);

                            column.Bound(x => x.active).Width(110);

                            //column.Bound(e => e.ContactTypes).ClientTemplate("#=contactTypeTemplate(ContactTypes)#").Width(110).Filterable(false).Sortable(false);
                            //column.Bound(e => e.ContactTypes).Width(110);
                            
                            column.Command(cmd =>
                               {
                                   cmd.Edit();
                               }).Title("ACTIONS").Width(110);
                        })
                      .Editable(editable => { editable.TemplateName("CorpCntViewModelEditor"); editable.Mode(GridEditMode.PopUp); })
                      .DataSource(datasource => datasource
                         .Ajax()
                         .ServerOperation(true)
                         .PageSize(10)
                         .Model(model =>
                            {
                                model.Id(x => x.ContactID);
                                model.Field(x => x.ContactID).Editable(false);
                                model.Field(e => e.ContactTypes).DefaultValue(new List<VMContactType>());
                            })
                          .Events(ev => ev.Error("error_CorpContactHandler"))
                          .Read(read => read.Action("Read_CorpContacts", "CorporateMasterLists", new { corpID = "#=corpID#" }))
                          .Create(create => create.Action("Create_CorpContact", "Corp_Owner", new { ParentID = "#=corpID#" }))
                          .Update(update => update.Action("Update_Contact", "Contacts"))
                       )
                       .Sortable()
                       .Filterable()
                       .Groupable()
                       .Pageable(ps => ps.Refresh(true)
                          .PreviousNext(true).PageSizes(true))
                .ToClientTemplate()
                )
            </text>);
             //End of the first tab

             elem.Add().Text("CHOOSE CONTACTS")
                .LoadContentFrom("Create", "Corp_Owner", new { corpID = "#=corpID#", area = "Credentials" }
              ); //End of the second tab

            
         })
      .ToClientTemplate()
    )//End of the tabStrip Component
}


<script src="~/Scripts/jquery.signalR-2.1.2.min.js"></script>
<script src="~/signalr/hubs"></script>
<script src="~/Scripts/kendo/jszip.min.js"></script>
<script src="~/Scripts/lib/Notify/notify.min.js"></script>

<script>
    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function(key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function() {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
            var grid = $("#gridCorporate").data("kendoGrid");
            grid.cancelChanges();
        }
    }

    function error_CorpOwnerHandler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function(key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function() {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
            var grid = jQuery("[id^='gridCorpOwner']").data("kendoGrid");
            grid.cancelChanges();
        }
    }

    function error_CorpDBHandler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function(key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function() {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
            var grid = jQuery("[id^='gridCorpDB']").data("kendoGrid");
            grid.cancelChanges();
        }
    }

    function error_CorpContactHandler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
            var grid = jQuery("[id^='CorpContactGrid_']").data("kendoGrid");
            grid.cancelChanges();
        }
    }

    $(function notifyDuplicatedDatabase() {
        var connection = $.hubConnection();
        var hub = connection.createHubProxy("CorporateMaster");
        hub.on("notifyIfDuplicated", function (notificacion) {
            $.notify(notificacion);
        });
        connection.start(function () {
            hub.invoke("doIfDBDuplicated");
        });
    });
</script>

