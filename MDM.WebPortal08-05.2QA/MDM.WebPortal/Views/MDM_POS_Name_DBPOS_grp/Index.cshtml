@*@model IEnumerable<MDM.WebPortal.Models.FromDB.MDM_POS_Name_DBPOS_grp>*@
@model MDM.WebPortal.Models.ViewModel.VMPOS_Name_DBPOS_grp

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout1.cshtml";

    
}


<header class="main-header">
    <div class="container">
        <h1 class="page-title"></h1>
        <ol class="breadcrumb pull-right">
            <li><a href="@Url.Action("Index","Home")"><i class="fa fa-home"></i> Home</a></li>
            <li class="active">MDM_POS_Name_DBPOS_grp</li>
        </ol>
    </div>
</header>

<!-----------------------By default------------------------------------------->
@*<div class="container">
    <p>
        @Html.ActionLink("Create New", "Create")
    </p>
    @(Html.Kendo().Grid<MDM.WebPortal.Models.ViewModel.VMMDM_POS_ListName>()
    .Name("POS")
    .ToolBar(tools => tools.Excel())
    .Excel(excel => excel
      .AllPages(true)
      .FileName("ExportData.xlsx")
      .Filterable(false)
      )
    .Columns(columns =>
    {        
        columns.Bound(p => p.PosName).Title("POS NAME").Width(300);
    })

    .Filterable()
    .Pageable(ps => ps.Refresh(true)    
    .PreviousNext(true).PageSizes(true))
    .Sortable()
    .Groupable()
    .Reorderable(r => r.Columns(true))
    .Resizable(r => r.Columns(true))
    .Selectable(s => s.Enabled(true)
    .Type(GridSelectionType.Row)
    .Mode(GridSelectionMode.Single))
    .ClientDetailTemplateId("template")
    
    .DataSource(dataSource => dataSource
        .Ajax()
        .PageSize(10)
        .Model(model =>
         {
            model.Id(x => x.MDMPOS_ListNameID); // Specify the property which is the unique identifier of the model
            model.Field(x => x.MDMPOS_ListNameID).Editable(false); // Make the ProductID property not editable
         })
        .Read(read => read.Action("POS", "MDM_POS_Name_DBPOS_grp"))        
     )
     .Events(events => events.DataBound("dataBound"))
    )
</div>

<script id="template" type="text/x-kendo-templat">
    @(Html.Kendo().Grid<MDM.WebPortal.Models.ViewModel.VMPOS_Name_DBPOS_grp>()
                   .Name("GRP_#=MDMPOS_ListNameID#")
            .Columns(columns =>
            {
                //Before
                columns.ForeignKey(o => o.DB_ID, (System.Collections.IEnumerable)ViewData["DB"], "DB_ID", "DB").Title("DB").Width(70);
                columns.Bound(o => o.FacilityId).Title("FACILITY_ID").Width(110);
                columns.Command(commands =>
                {
                    commands.Edit();
                }).Title("COMMANDS").Width(110);
                
                //test
            })
            .DataSource(dataSource => dataSource
                .Ajax()
                .PageSize(10)
                        .Model(model =>
                          {
                              model.Id(x => x.MDMPOS_NameID);
                              model.Field(x => x.MDMPOS_NameID).Editable(false);                             
                          })
                          .Read(read => read.Action("DbPosGrp", "MDM_POS_Name_DBPOS_grp", new { MDMPOS_ListNameID = "#=MDMPOS_ListNameID#" }))
                          .Update(x => x.Action("Update", "MDM_POS_Name_DBPOS_grp", new { MDMPOS_ListNameID = "#=MDMPOS_ListNameID#" }))
            )
           // .Events(e => e.ExcelExport("orders_excelExport"))
            .Editable(editable => editable.Mode(GridEditMode.InLine))//test
            .Pageable()
            .Sortable()
            .ToClientTemplate()
    )
</script>


<script>
    function dataBound() {
        detailExportPromises = [];

        this.expandRow(this.tbody.find("tr.k-master-row").first());
    }   
</script>*@



<div class="container">
    <p>
        @Html.ActionLink("Create New", "Create")
    </p>


    @(Html.Kendo().Grid<MDM.WebPortal.Models.ViewModel.VMPOS_Name_DBPOS_grp>()
          .Name("popupGrid")
          .Columns(columns =>
          {
              columns.Bound(p => p.MDMPOS_NameID).Width(20).Hidden().HeaderHtmlAttributes(new {@title = "Entity"});
              columns.ForeignKey(o => o.MDMPOS_ListNameID, (System.Collections.IEnumerable) ViewData["POS"], "MDMPOS_ListNameID", "PosName").Title("POS").Width(110);


              columns.ForeignKey(o => o.DB_ID, (System.Collections.IEnumerable) ViewData["DB"], "DB_ID", "DB").Title("DB").Width(70);
              
              columns.Bound(x => x.FacilityID).Title("FACILITY").Width(70);

              columns.Bound(x => x.Extra).Title("EXTRA").Width(110);

              columns.Bound(x => x.Active).Title("ACTIVE").Width(70);

              columns.Command(p => p.Edit().Text("Edit").HtmlAttributes(new {@title = "Edit"})).Width(80);
          })
          .ToolBar(tools => { tools.Excel();})
          .Excel(excel => excel
              .AllPages(true)
              .FileName("ExportData.xlsx")
              .Filterable(false)
          )
          
          .Groupable()
          .Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("PopupEditView"))
          .Events(e => e.Edit("onEdit"))
          .Sortable()
          .Filterable()
          .Pageable(ps => ps.Refresh(true)
          .PreviousNext(true).PageSizes(true))
          .Reorderable(r => r.Columns(true))
          .Resizable(r => r.Columns(true))
          .Selectable(s => s.Enabled(true)
          .Type(GridSelectionType.Row)
          .Mode(GridSelectionMode.Single))
          
          .DataSource(dataSource => dataSource
              .Ajax()
              .Model(model => { model.Id(p => p.MDMPOS_NameID);
                                  model.Field(x => x.Extra).Editable(false);
              } )
              .PageSize(10)
              .Events(events => events.Error("error_handler")) //allows us catch the errors sent by the JSON object, especificados por ModelState
              .Group(x => x.Add(c => c.MDMPOS_ListNameID)) //Agrupa por defecto usando la columna POS
              .Read(read => read.Action("Read", "MDM_POS_Name_DBPOS_grp").Type(HttpVerbs.Post))
              .Update(update => update.Action("Update", "MDM_POS_Name_DBPOS_grp").Type(HttpVerbs.Post))
          )
          )
</div>
<script src="Scripts/kendo/jszip.min.js"></script>
<script>
    function onEdit(e) {
        //attach validator to the PopUp window
        $("[data-role=window]").kendoValidator();
    }

    

    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    }
</script>
    
   

   
