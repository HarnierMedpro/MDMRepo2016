@using Kendo.Mvc.UI
@using MDM.WebPortal.Areas.Credentials.Models.ViewModel
@model IEnumerable<MDM.WebPortal.Models.FromDB.Contact>

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout1.cshtml";
}

<header class="main-header">
    <div class="container">
        <h1 class="page-title"></h1>
        <ol class="breadcrumb pull-right">
            <li><a href="@Url.Action("Index", "Home", new {area = ""})"><i class="fa fa-home"></i> Home</a></li>
            <li class="active">Contacts</li>
        </ol>
    </div>
</header>

<script type="text/kendo" id="contactTypeTemplate">
    <ul>
        #for(var i = 0; i< data.length; i++){#
        <li>#:data[i].ContactType_Name#</li>
        #}#
    </ul>
</script>

<script type="text/javascript">
    var contactTypeTemplate = kendo.template($("#contactTypeTemplate").html(), { useWithBlock: false });
</script>

<div class="container-fluid">
    @if (ViewBag.ContactType == false)
    {
        <div class="row">
        <div class="col-md-5">
            <div class="alert alert-info">
                <a href="#" class="close" data-dismiss="alert" aria-label="Close">&times;</a>
                <p>The CONTACT TYPE table is empty. </p>
            </div>
        </div>
        </div>
        
    }
    @(Html.Kendo().TabStrip()
          .Name("Contactos")
          .SelectedIndex(0)
          .Animation(animation =>
              animation.Open(effect =>
                  effect.Fade(FadeDirection.In)))
          .Items(elem =>
          {
              elem.Add().Text("CONTACTS").Content(@<text>
                        @(Html.Kendo().Grid<MDM.WebPortal.Areas.Credentials.Models.ViewModel.VMContact>()
                            .Name("ContactGrid")
                            .ToolBar(tool =>
                            {
                                tool.Create().Text("NEW CONTACT");
                                tool.Excel();
                            })
                            .Excel(e => e.AllPages(true).FileName("Export_Contacts"))
                            .Columns(column =>
                            {
                                column.Bound(x => x.ContactID).Hidden(true);

                                column.Bound(x => x.LName).Width(110);

                                column.Bound(x => x.FName).Width(110);

                                column.Bound(x => x.PhoneNumber).Width(110);

                                column.Bound(x => x.Email).Width(110);

                                column.Bound(x => x.active).Width(110);

                                column.Bound(e => e.ContactTypes).ClientTemplate("#=contactTypeTemplate(ContactTypes)#").Width(110).Filterable(false).Sortable(false);

                                column.Command(cmd =>
                                {
                                    cmd.Edit();
                                }).Title("ACTIONS").Width(110);
                            })
                            .Editable(editable =>
                            {
                                editable.TemplateName("ContactViewModelEditor");
                                editable.Mode(GridEditMode.PopUp);
                            })
                            .DataSource(datasource => datasource
                                .Ajax()
                                .ServerOperation(true)
                                .PageSize(10)
                                .Model(model =>
                                {
                                    model.Id(x => x.ContactID);
                                    model.Field(x => x.ContactID).Editable(false);
                                    model.Field(e => e.ContactTypes).DefaultValue(new List<VMContactType>());
                                })
                                .Events(ev => ev.Error("error_ContactHandler"))
                                .Read(read => read.Action("Read_Contact", "Contacts"))
                                .Create(create => create.Action("Create_Contact", "Contacts"))
                                .Update(update => update.Action("Update_Contact", "Contacts"))
                            )
                            .Sortable()
                            .Filterable()
                            .Groupable()
                            .Pageable(ps => ps.Refresh(true)
                                .PreviousNext(true).PageSizes(true))
                            )
              </text>);

              elem.Add().Text("CONTACT TYPES").LoadContentFrom("ContactTypeList", "ContactTypes");

          })       
)
</div>

<script>
    function serialize(data) {
        debugger;
        for (var property in data) {
            if ($.isArray(data[property])) {
                serializeArray(property, data[property], data);
            }
        }
    }

    function serializeArray(prefix, array, result) {
        for (var i = 0; i < array.length; i++) {
            if ($.isPlainObject(array[i])) {
                for (var property in array[i]) {
                    result[prefix + "[" + i + "]." + property] = array[i][property];
                }
            }
            else {
                result[prefix + "[" + i + "]"] = array[i];
            }
        }
    }

    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
            var grid = $("#ContactGrid").data("kendoGrid");
            grid.cancelChanges();
        }
    }

    function error_ContactHandler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
            var grid = $("#TipoContacto").data("kendoGrid");
            grid.cancelChanges();
        }
    }
</script>