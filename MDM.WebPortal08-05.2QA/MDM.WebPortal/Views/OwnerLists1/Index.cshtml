@model IEnumerable<MDM.WebPortal.Models.FromDB.OwnerList>

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout1.cshtml";
}


<script src="~/Scripts/kendo/jszip.min.js"></script>
<header class="main-header">
    <div class="container">
        <h1 class="page-title"></h1>
        <ol class="breadcrumb pull-right">
            <li><a href="@Url.Action("Index","Home", new {area=""})"><i class="fa fa-home"></i> Home</a></li>            
            <li class="active">Owners</li>
        </ol>
    </div>
</header>
<div class="container-fluid">
    @(Html.Kendo().Grid<MDM.WebPortal.Models.ViewModel.VMOwnerList>()
    .Name("GridOwner")
    .ToolBar(tools =>
    { 
        tools.Excel();
        tools.Create().Text("NEW OWNER");        
    })
    .Excel(e => { e.AllPages(true);
                    e.FileName("Export_OwnerList");
    } )
    .Columns(columns =>
      {
        columns.Bound(x => x.LastName).Title("LAST NAME").Width(300);

        columns.Bound(p => p.FirstName).Title("FIRST NAME").Width(300);

        columns.Bound(p => p.active).Title("ACTIVE").Width(110);

        columns.Command(commands =>
          {
            commands.Edit();
          }).Title("COMMANDS").Width(200);
     })
     .Filterable()
     .Pageable(ps => ps.Refresh(true)
     .PreviousNext(true).PageSizes(true))
     .Sortable()
     //.ClientDetailTemplateId("template")
     //.Events(e => e.ExcelExport("owners_excelExport").DetailInit("owners_detailInit"))
     .Groupable()
     .Reorderable(r => r.Columns(true))
     .Resizable(r => r.Columns(true))
     .Selectable(s => s.Enabled(true)
     .Type(GridSelectionType.Row)
     .Mode(GridSelectionMode.Single))
     
    .DataSource(dataSource => dataSource
          .Ajax()
          .ServerOperation(true)
          .PageSize(10)
          .Model(model =>
          {
              model.Id(x => x.OwnersID); 
              model.Field(x => x.OwnersID).Editable(false); 
          })
          .Events(events => events.Error("error_handler"))
          .Update(update => update.Action("Update", "OwnerLists"))
          .Read(read => read.Action("Read", "OwnerLists"))
          .Create(create => create.Action("Create_Owner", "OwnerLists"))
       )
        //.Events(events => events.DataBound("dataBound"))
    )
</div>

@*<script id="template" type="text/x-kendo-template">
    @(Html.Kendo().Grid<MDM.WebPortal.Models.ViewModel.VMCorporateMasterLists>()
            .Name("gridCorporate_#=OwnersID#") // template expression, to be evaluated in the master context
            .Columns(columns =>
            {
                //columns.Bound(o => o.DB_ID).Title("ID").Width(110);
                columns.Bound(o => o.CorporateName).Title("CORPORATE NAME").Width(110);
                columns.Bound(o => o.active).Width(300).Title("ACTIVE");
            })
            .DataSource(dataSource => dataSource
                .Ajax()
                .PageSize(10)
                .Read(read => read.Action("HierarchyBinding_Corp", "OwnerLists", new { OwnersID = "#=OwnersID#" }))
            )
            .Pageable()
            .Sortable()
            .ToClientTemplate()
    )

</script>*@

<script>
    //function dataBound() {
    //    detailExportPromises = [];
    //    this.expandRow(this.tbody.find("tr.k-master-row").first());
    //}

    //var detailExportPromises = [];

    //function owners_detailInit(e) {
    //    var deferred = $.Deferred();

    //    // get the index of the master row
    //    var masterRowIndex = e.masterRow.index(".k-master-row");

    //    // add the deferred to the list of promises
    //    detailExportPromises.push(deferred);

    //    var detailGrid = e.detailRow.find("[data-role=grid]").data("kendoGrid");

    //    detailGrid.bind("excelExport", function (e) {
    //        // prevent saving the file
    //        e.preventDefault();

    //        // resolve the deferred
    //        deferred.resolve({
    //            masterRowIndex: masterRowIndex,
    //            sheet: e.workbook.sheets[0]
    //        });
    //    });
    //}

    //function owners_excelExport(e) {
    //    // prevent saving the file because we will update the workbook
    //    e.preventDefault();

    //    var workbook = e.workbook;

    //    // Export all detail grids
    //    $("[data-role=grid]", this.element).each(function () {
    //        $(this).data("kendoGrid").saveAsExcel();
    //    });

    //    // wait for all detail grids to finish exporting
    //    $.when.apply(null, detailExportPromises)
    //    .then(function () {
    //        // get the export results
    //        var detailExports = $.makeArray(arguments);

    //        // sort by masterRowIndex
    //        detailExports.sort(function (a, b) {
    //            return a.masterRowIndex - b.masterRowIndex;
    //        });

    //        // add an empty column
    //        workbook.sheets[0].columns.unshift({ width: 30 });

    //        // prepend an empty cell to each row
    //        for (var i = 0; i < workbook.sheets[0].rows.length; i++) {
    //            workbook.sheets[0].rows[i].cells.unshift({});
    //        }

    //        // merge the detail export sheet rows with the master sheet rows
    //        // loop backwards so the masterRowIndex doesn't need to be updated
    //        for (var i = detailExports.length - 1; i >= 0; i--) {
    //            var masterRowIndex = detailExports[i].masterRowIndex + 1;

    //            var sheet = detailExports[i].sheet;

    //            // prepend an empty cell to each row
    //            for (var ci = 0; ci < sheet.rows.length; ci++) {
    //                if (sheet.rows[ci].cells[0].value) {
    //                    sheet.rows[ci].cells.unshift({});
    //                }
    //            }

    //            // insert the detail sheet rows after the master row
    //            [].splice.apply(workbook.sheets[0].rows, [masterRowIndex + 1, 0].concat(sheet.rows));
    //        }

    //        // save the workbook
    //        kendo.saveAs({
    //            dataURI: new kendo.ooxml.Workbook(workbook).toDataURL(),
    //            fileName: "Export_OwnerList.xlsx"
    //        });
    //    });
    //}

    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            // Display the message
            alert(message);
            // Cancel the changes
            var grid = $("#GridOwner").data("kendoGrid");
            grid.cancelChanges();
        }
    }
</script>