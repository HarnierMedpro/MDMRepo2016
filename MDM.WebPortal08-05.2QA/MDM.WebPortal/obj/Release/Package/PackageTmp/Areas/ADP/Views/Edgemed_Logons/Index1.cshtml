@using Kendo.Mvc.UI
   @* @model IEnumerable<MDM.WebPortal.Models.FromDB.Edgemed_Logons>*@

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout1.cshtml";
}
<header class="main-header">
    <div class="container">
        <h1 class="page-title"></h1>
        <ol class="breadcrumb pull-right">
            <li><a href="@Url.Action("Index", "Home", new{ area = ""})"><i class="fa fa-home"></i> Home</a></li>
            <li class="active">Edgemed_Logons</li>
        </ol>
    </div>
</header>

<div class="container-fluid">

    @*Hasta que no resuelva la cuestion de porque el partial view no muestra el autocomplete
        <button class="btn btn-primary btn-lg btn-ar" data-toggle="modal" data-target="#myModal3">
        Create New
    </button>
    <a class="btn btn-primary btn-lg btn-ar" href="@Url.Action("Create")">
        Create New
    </a>

    <br />
    <br />
    *@
    @(Html.Kendo().Grid<MDM.WebPortal.Areas.ADP.Models.VMAdp_Edgemed>()
          .Name("ADP")
          .ToolBar(tools =>
          {
              tools.Excel();
              tools.Create().Text("NEW EDGEMED_LOGONS");
          })
          .Columns(columns =>
          {
              columns.Bound(p => p.ADPMasterID).Hidden(true);
              columns.Bound(p => p.LName).Width(300);
              columns.Bound(p => p.FName).Width(300);
          })
          .DataSource(dataSource => dataSource
              .Ajax()
              .PageSize(10)
              .Model(model =>
              {
                  model.Id(x => x.ADPMasterID);
                  model.Field(x => x.ADPMasterID).Editable(false);
              })
              .Read(read => read.Action("ADP", "Edgemed_Logons"))
              .Create(create => create.Action("Create_General", "Edgemed_Logons"))
          )
          .Events(events => events.DataBound("dataBound"))

          .Sortable()
          .Filterable()
          .Editable(ed => ed.Mode(GridEditMode.PopUp).TemplateName("EdgemedViewModelEditor"))
          .Pageable(ps => ps.Refresh(true)
          .PreviousNext(true).PageSizes(true))
          .Groupable()
          .ClientDetailTemplateId("template")
          .Events(e => e.ExcelExport("edgemed_excelExport").DetailInit("edgemed_detailInit")) //added
          .Reorderable(r => r.Columns(true))
          .Resizable(r => r.Columns(true))
          .Selectable(s => s.Enabled(true)
          .Type(GridSelectionType.Row)
          .Mode(GridSelectionMode.Single))
          )
</div>

<script id="template" type="text/kendo-tmpl">
    @(Html.Kendo().Grid<MDM.WebPortal.Areas.ADP.Models.VMEdgemed_Logons>()
    .Name("EdgemedLog_#=ADPMasterID#")
    .ToolBar(tools => tools.Create())
    .Columns(columns =>
     {
         //Edgemed_Logons ID
       //columns.Bound(o => o.Edgemed_LogID).Width(70);
         
         //FK from dbo.ADPMaster table
      // columns.ForeignKey(o => o.id, (System.Collections.IEnumerable)ViewData["ADP"], "ADPID", "INFO").Title("ADPMaster ID").Width(70);
      //columns.Bound(o => o.id).Title("CURRENT ADP").Width(70);//EL PK DE ADPMaster ENTRA EN CONFLICTO CON EL PK DE EDGEMED_LOGONS ENTITY

       //columns.Bound(o => o.ADPMasterID).Width(70).EditorTemplateName("adp");  
           
       columns.Bound(o => o.Edgemed_UserName).Width(110);
         
       columns.Bound(o => o.Zno).Width(70);
         
       columns.Bound(o => o.EdgeMed_ID).Width(110);
         
       columns.Bound(o => o.Active).Width(110);
         
       columns.Command(commands =>
       {
          commands.Edit();
       }).Title("COMMANDS").Width(110); 
     })
     .DataSource(dataSource => dataSource
        .Ajax()
        .PageSize(10)
        .Model(model =>
          {
             model.Id(x => x.Edgemed_LogID);
             model.Field(x => x.Edgemed_LogID).Editable(false);
          })
        .Events(events => events.Error("error_handler"))
        .Read(read => read.Action("EdgeMedLogonsforAdp", "Edgemed_Logons", new { ADPMasterID = "#=ADPMasterID#" }))
        .Update(update => update.Action("UpdateEdgemed", "Edgemed_Logons", new { ADPMasterID = "#=ADPMasterID#" }))
        .Create(create => create.Action("CreateEdgemed", "Edgemed_Logons", new { ParentID = "#=ADPMasterID#" }))
    )                                                                                           
    .Pageable()
    .Sortable()
    //.Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("Test"))
    .ToClientTemplate()
 )
</script>
<script>
    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    }

    function dataBound() {
        detailExportPromises = []; //added
        this.expandRow(this.tbody.find("tr.k-master-row").first());
    }

    var detailExportPromises = [];

    function edgemed_detailInit(e) {
        var deferred = $.Deferred();

        // get the index of the master row
        var masterRowIndex = e.masterRow.index(".k-master-row");

        // add the deferred to the list of promises
        detailExportPromises.push(deferred);

        var detailGrid = e.detailRow.find("[data-role=grid]").data("kendoGrid");

        detailGrid.bind("excelExport", function (e) {
            // prevent saving the file
            e.preventDefault();

            // resolve the deferred
            deferred.resolve({
                masterRowIndex: masterRowIndex,
                sheet: e.workbook.sheets[0]
            });
        });
    }

    function edgemed_excelExport(e) {
        // prevent saving the file because we will update the workbook
        e.preventDefault();

        var workbook = e.workbook;

        // Export all detail grids
        $("[data-role=grid]", this.element).each(function () {
            $(this).data("kendoGrid").saveAsExcel();
        });

        // wait for all detail grids to finish exporting
        $.when.apply(null, detailExportPromises)
            .then(function () {
                // get the export results
                var detailExports = $.makeArray(arguments);

                // sort by masterRowIndex
                detailExports.sort(function (a, b) {
                    return a.masterRowIndex - b.masterRowIndex;
                });

                // add an empty column
                workbook.sheets[0].columns.unshift({ width: 30 });

                // prepend an empty cell to each row
                for (var i = 0; i < workbook.sheets[0].rows.length; i++) {
                    workbook.sheets[0].rows[i].cells.unshift({});
                }

                // merge the detail export sheet rows with the master sheet rows
                // loop backwards so the masterRowIndex doesn't need to be updated
                for (var i = detailExports.length - 1; i >= 0; i--) {
                    var masterRowIndex = detailExports[i].masterRowIndex + 1;

                    var sheet = detailExports[i].sheet;

                    // prepend an empty cell to each row
                    for (var ci = 0; ci < sheet.rows.length; ci++) {
                        if (sheet.rows[ci].cells[0].value) {
                            sheet.rows[ci].cells.unshift({});
                        }
                    }

                    // insert the detail sheet rows after the master row
                    [].splice.apply(workbook.sheets[0].rows, [masterRowIndex + 1, 0].concat(sheet.rows));
                }

                // save the workbook
                kendo.saveAs({
                    dataURI: new kendo.ooxml.Workbook(workbook).toDataURL(),
                    fileName: "ExportEdgmed.xlsx"
                });
            });
    }
</script>